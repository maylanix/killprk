settings
{
	main
	{
		Description: "<FG8533ffFF>★ kill r66 ★\n<FGa366ffFF>mercy parkour map by maylanix ♡\n\n<FGe0ccffFF>THANK YOU! ♡\n<FGf0e6ffFF> playtesters:\n    ★ \n peace's editor: T6QQT"
		Mode Name: "r66 ‣ mercy kill parkour"
	}

	lobby
	{
		Allow Players Who Are In Queue: Yes
		Map Rotation: Paused
		Match Voice Chat: Enabled
		Max Spectators: 12
		Max Team 1 Players: 6
		Max Team 2 Players: 0
		Return To Lobby: Never
		Swap Teams After Match: No
	}

	modes
	{
		Skirmish
		{
			enabled maps
			{
				Route 66 972777519512068153
			}
		}

		Team Deathmatch
		{
			Game Length In Minutes: 15
			Score To Win: 200
			Self Initiated Respawn: Off

			enabled maps
			{
			}
		}

		General
		{
			Allow Hero Switching: Off
			Enemy Health Bars: Off
			Game Mode Start: Immediately
			Hero Limit: Off
			Kill Cam: Off
			Kill Feed: Off
			Spawn Health Packs: Disabled
		}
	}

	heroes
	{
		General
		{
			Ability Cooldown Time: 0%
			No Ammunition Requirement: On
            Passive Health Regeneration: On
			Spawn With Ultimate Ready: On

			Mei
			{
				Ice Wall: Off
			}

			enabled heroes
			{
				Mercy
			}
		}
	}

	workshop
	{
		New level radius새 관문 반경: 1.600
		Teleport animation: Off
	}

	extensions
	{
		Buff Status Effects
		Debuff Status Effects
		Explosion Sounds
		Play More Effects
		Spawn More Dummy Bots
	}
}

variables
{
	global:
		0: EditMode
		1: NewCheckpointDefaultRadius
		2: NewCheckpointDefaultCtrl
		3: NewCheckpointDefaultMaxRefresh
		4: BotGravity
		5: Error
		7: Checkpoint
		8: I
		9: ChooseOrbPosition
		10: ChooseSpherePosition
        11: enmybot
        12: enmyrfdefault
        13: enmyname
        14: buttonsArray
		15: allybot
		16: allyname
		17: rezonpoint
		18: bkey
		19: rkey
		20: ChooseCloudPosition
		21: CurrentChooseOrb
		22: CurrentChooseSphere
		23: CurrentChooseCloud
		24: TempArray
		26: Once
		27: NumberOfUsedEntity
		28: Vips
		29: rezrefresh
		31: PlayersRecord
		32: PlayersData
		33: Top5
		34: TipHudSpaceHolder
		35: OnGround
		36: CreatorAndCode
		38: Config
		39: Top5Color
		40: WorldTexts
		41: BigMsgs
		42: SmallMsgs
		43: Tips
		44: Debug
		45: II
		46: ShowHotKeyPlayers
		48: PreviewPosition
		49: CheckpointBPosition
		50: TempVar
		51: FillSpace
		52: defaultorb
		53: gamer

	player:
		0: editMode
		1: checkpoint
		2: third
		3: freeMode
		4: spectatorMode
		5: cheat
		6: time
		7: mistake
		8: sphereEffects
		9: cloudEffects
        10: enmy
		11: displayedCheckpoint
		12: jump
		13: bhop
		14: bestRecord
		15: playerData
		16: tempCurrentOrb
		17: chooseHero
		18: rezorb
		20: isSetAbilities
		21: voice
		22: bodySize
		23: barrierSize
		24: projectile
		25: playerColor
		26: playerNickname
		27: currentWorldText
		29: currentBigMsg
		30: currentSmallMsg
		31: i
		32: dataIndex
		33: tp
		34: leaveOriginalCheckpoint
		35: finished
		36: checkpointA
		37: checkpointB
		38: currentCheckpoint
		39: currentCloud
		40: currentSphere
		41: currentOrb
		42: orbEffects
		43: orbIcons
		44: botIcons
		45: nearestOrb
		46: botEffects
		47: targetBot
		48: movementCollision
		49: resurrectTime
		50: resurrectNumber
		51: numberOfNeedResurrect
		52: ability2
		53: killTargetBot
		54: playerTittle
        55: enemy
        56: used
		57: aura
}

subroutines
{
	0: CreateNewEffect
	1: EditChoosedEffect
	2: CreatePlayerHUDAndEffects
	3: InitializePlayerVariables
	4: CreatePlayerTargetBot
	5: SetCurrentAbilities
	6: DisplayCurrentAbilityMsgs
	7: CreateCurrentEffects
	8: GetCurrentCheckpoint
	9: EditPlayerData
	10: TempSavePlayerData
	11: CreateGlobalHUD
	12: TeleportCurrentBot
	13: CreateCurrentWorldText
	14: DisplayCurrentCustomBigMsgs
	15: DisplayCurrentCustomSmallMsgs
	16: InitializeGlobalVariables
	17: TeleportToCurrentCheckpoint
	18: ValidationPlayerData
	19: ClearRedundantData
	21: CancelAbilityAndMomentum
	22: EnableAllAbilities
	23: ContinueTiming
	24: ErrorWarningMsg
	25: TeleportBotToRefreshPosition
	26: SkipOrBackCheckpoint
	27: ChooseCheckpoint
	28: KillOrResurrectBot
	29: TeleportBotTokillRefreshPosition
	30: CreatePlayerEnemyBot
}

rule("<fgffb3b3ff>welcome to my mercy kill parkour editor - maylanix ♡ (read me)")
{
    event
    {
        Ongoing - Global;
    }

    actions
    {
        "» the editor is ready for use;\n» please report any bugs/issues to maylanix on discord"
        Continue;
		"» have a look at the orange settings for some extra settings!\n» check out new customization options in [setup]"
        Continue;
		"***original editor credit to peace (T6QQT)***\nalso thanks to gigamercy cause i grabbed his dummy bot destroyer :)"
		Continue;
    }
}

rule("<fgffb3b3ff>♡ ##—— paste checkpoint data here ——> ♡")
{
	event
	{
		Ongoing - Global;
	}
}

rule("<fgffb3b3ff>♡ ##—— username, code + difficulty ——> ♡")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		"[string], enter your username"
		Global.CreatorAndCode[0] = Custom String("");
		"[string], enter the code"
		Global.CreatorAndCode[1] = Custom String("");
		"[string], enter the difficulty (optional)"
        Global.CreatorAndCode[2] = Custom String("");
		"[string], plug social media (optional)"
        Global.CreatorAndCode[3] = Custom String("");
	}
}

rule("<fgffb3b3ff>♡ ##—— setup ——> ♡")
{
    event
    {
        Ongoing - Global;
    }

    actions
    {
		"ALLY CUSTOM NAME — leave empty to select default from orange workshop settings"
		Global.Config[11] = Custom String("");
		"ENEMY CUSTOM NAME — leave empty to select default from orange workshop settings"
        Global.Config[50] = Custom String("");
		"CUSTOM KILL MSG — appears when GA refresh on kill is enabled"
		Global.Config[31] = Custom String("");
		"REZ ON CHECKPOINT — text (Enabled, Disabled)"
		Global.Config[51] = Array(Custom String("{0} rez on checkpoint enabled", Ability Icon String(Hero(Mercy), Button(Ability 2))), 
			Custom String("{0} rez on checkpoint disabled", Ability Icon String(Hero(Mercy), Button(Ability 2))));
        "DISTANCE TO REZ TEXT — set the color"
        Global.gamer[1] = Custom Color(255, 179, 204, 255);
    }
}

rule("<fgffb3b3ff>♡ ##—— personalized config ——> ♡")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		"Current level ring — color"
		Global.Config[0] = Color(Purple);
		"Bot icon — color (Crouch Enabled, Crouch Disabled)"
		Global.Config[1] = Array(Custom Color(210, 188, 248, 255), Custom Color(172, 117, 255, 255));
		"Goal checkpoint — text"
		Global.Config[2] = Array(Custom String("checkpoint"));
		"Goal checkpoint — text size"
		Global.Config[3] = 1.500;
		"Goal checkpoint — text color"
		Global.Config[4] = Custom Color(209, 179, 255, 255);
		"Goal checkpoint — icon color"
		Global.Config[5] = Custom Color(209, 179, 255, 255);
		"Removed checkpoint effects to reduce server load — add them back at your own risk"
		disabled Global.Config[6] = Null;
		"Goal checkpoint — ring color"
		Global.Config[7] = Color(Violet);
		"Removed checkpoint effects to reduce server load — add them back at your own risk"
		disabled Global.Config[8] = Null;
		"Removed checkpoint effects to reduce server load — add them back at your own risk"
		disabled Global.Config[9] = Null;
		"TP checkpoint ring — color"
		Global.Config[10] = Color(Purple);
		"Creator & code — text color"
		Global.Config[12] = Custom Color(209, 179, 255, 180);
		"Level Progress — text"
		Global.Config[13] = Array(Custom String("level :"), Custom String("레벨 진행"), Custom String("关卡进度"));
		"Level Progress — text color"
		Global.Config[14] = Custom Color(209, 179, 255, 255);
		"Free mode enabled — text"
		Global.Config[15] = Array(Custom String("free mode on"), Custom String("프리 모드 활성화"), Custom String("你现在可以自由行动了"));
		"Spectator mode enabled — text"
		Global.Config[16] = Array(Custom String("spectating..."), Custom String("관전자 모드 활성화"), Custom String("你现在可以观战别人了"));
		"Crouch disabled — text"
		Global.Config[17] = Array(Custom String("{0} crouch", Icon String(No)), Custom String("{0}앉기 비활성화", Icon String(No)),
			Custom String("{0}本关不可以蹲哦", Icon String(No)));
		"Crouch enabled — text"
		Global.Config[18] = Array(Custom String(""), Custom String(""), Custom String(""), Custom String("本关可以蹲哟"));
		"No target bot — text\nIf empty, default is 'This level currently has no target [hero name]'"
		Global.Config[19] = Array(Custom String(""));
		"Need orb — text\nIf empty, default is 'This level has an orb to pick up'"
		Global.Config[20] = Custom String("");
		"Grabbed orb — text"
		Global.Config[21] = Array(Custom String("orb collected"), Custom String("좋았어"), Custom String("你捡到球啦"));
		"Did not grab orb — text"
		Global.Config[22] = Array(Custom String("orb forgotten"), Custom String("먹어야할 오브 갯수"), Custom String("还有球没捡呢喂！"));
		"Ga refresh — text"
		Global.Config[23] = Array(Custom String("GA refreshed"), Custom String("수호천사 활성화!"), Custom String("也刷新了！"));
		"Top5 — text\nIf empty, default is 'Today's Top {number}'"
		Global.Config[24] = Custom String("");
		"Top5 — text color"
		Global.Config[25] = Custom Color(209, 179, 255, 255);
		"Top5 — colors"
		Global.Top5Color = Array(Custom Color(200, 164, 255, 255), Custom Color(184, 137, 255, 255), Custom Color(172, 117, 255, 255),
			Custom Color(163, 102, 255, 255), Custom Color(133, 51, 255, 255));
		"Other winners — text"
		Global.Config[26] = Custom String("more scores");
		"Other winners — text color"
		Global.Config[27] = Custom Color(209, 179, 255, 255);
		"Other winners — ranking color"
		Global.Config[28] = Custom Color(184, 137, 255, 255);
		"Unlimited Ga — text"
		Global.Config[29] = Array(Custom String("unlimited {0}", Ability Icon String(Hero(Mercy), Button(Ability 1))), Custom String(
			"{0} 무한 모드 활성화!", Ability Icon String(Hero(Mercy), Button(Ability 1))), Custom String("{0} 已设置为无限次！", Ability Icon String(Hero(
			Mercy), Button(Ability 1))));
		"Single Ga — text"
		Global.Config[30] = Array(Custom String("only one {0}", Ability Icon String(Hero(Mercy), Button(Ability 1))), Custom String(
			"{0} 무한 모드 비활성화!", Ability Icon String(Hero(Mercy), Button(Ability 1))), Custom String("{0} 已设置为单次！!", Ability Icon String(
			Hero(Mercy), Button(Ability 1))));
		"Resurrection success — text"
		Global.Config[32] = Array(Custom String("target has successfully been resurrected"), Custom String("You have successfully resurrected the target"),
			Custom String("你成功复活目标啦"));
		"Did not resurrect — text"
		Global.Config[33] = Array(Custom String(""));
		"Anti-sphere — color"
		Global.Config[40] = Color(Purple);
		"Bouncy cloud — color"
		Global.Config[41] = Color(Violet);
		"Default Orb — color"
		Global.Config[42] = Color(Violet);
		"Default Orb — icon color"
		Global.Config[43] = Custom Color(220, 162, 246, 255);
		"Refresh Orb — color"
		Global.Config[44] = Color(Rose);
		"Refresh Orb — icon color"
		Global.Config[45] = Custom Color(224, 204, 255, 255);
		"Bot teleport position — effect color"
		Global.Config[46] = Color(Violet);
		"Refresh Orb, will need resurrect — icon color"
		Global.Config[47] = Color(Violet);
		"Bot teleport position, will need to resurrect — effect color"
		Global.Config[48] = Color(Purple);
		"Tips — text color"
		Global.Config[49] = Custom Color(200, 164, 255, 255);
	}
}

rule("<fgffb3b3ff>♡ ##—— tips ——> ♡")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		"index, Fill in the level;\n	String, Fill in the text"
		Global.Tips[0] = Custom String("hello ♡");
	}
}


rule("<fgffb3b3ff>♡ ##—— in-map texts ——> ♡")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		"index, Fill in the level; \n[0] Fill in the text;  \n[1] Fill in the postion (If not filled in, it will be displayed at the next checkpoint);  \n[2] Fill in the text size; \n[3] Fill in the text color"
		Global.WorldTexts[0] = Array(Custom String(""), Vector(0, 0, 0), 1.6, Custom Color(209, 179, 255, 255));
	}
}

rule("<fgffb3b3ff>♡ ##—— big msgs ——> ♡")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		"index, Fill in the level;    \n string, Fill in the text (Multiple texts in one level) "
		Global.BigMsgs[0] = Array(Custom String(""), Custom String(""));
	}
}

rule("<fgffb3b3ff>♡ ##—— small msgs ——> ♡")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		"index, Fill in the level;    \nString, Fill in the text (Multiple texts in one level) "
		Global.SmallMsgs[0] = Array(Custom String(""), Custom String(""));
	}
}

rule("<fgffb3b3ff>♡ ##—— custom player titles ——> ♡")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		"[0] player's username; \n[1] player's desired display name, If not filled in, defaults to the player's username; \n[2] text color, white is a random color "
		Global.Vips[Count Of(Global.Vips)] = Array(Custom String(""), Custom String(""), Color(White));
	}
}

rule("Global initialization")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Call Subroutine(InitializeGlobalVariables);
		Wait(2, Ignore Condition);
		Disable Built-In Game Mode Announcer;
		Disable Built-In Game Mode Scoring;
		Disable Built-In Game Mode Music;
		Disable Built-In Game Mode Completion;
		If(!Global.Debug);
			Disable Inspector Recording;
		Else;
			Create HUD Text(All Players(All Teams), Null, Custom String("实时负载：{0}　　平均负载：{1}　　负载峰值：{2}", Server Load, Server Load Average,
				Server Load Peak), Null, Top, -1, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		End;
		Wait(2, Ignore Condition);
		Call Subroutine(CreateGlobalHUD);
		If(Current Game Mode != Game Mode(Skirmish));
			Set Match Time(1);
		End;
		Pause Match Time;
	}
}

rule("Player initialization")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		Is Dummy Bot(Event Player) == False;
	}

	actions
	{
		Disable Game Mode In-World UI(Event Player);
		Disable Nameplates(All Players(All Teams), All Players(All Teams));
		Enable Death Spectate All Players(Event Player);
		Enable Death Spectate Target HUD(Event Player);
		If(Current Game Mode != Game Mode(Skirmish));
			Disable Game Mode HUD(Event Player);
		End;
		Call Subroutine(InitializePlayerVariables);
		Call Subroutine(ValidationPlayerData);
		Teleport(Event Player, Global.Checkpoint[Event Player.checkpoint] ? Global.Checkpoint[Event Player.checkpoint][0] : Event Player);
		Call Subroutine(CreatePlayerTargetBot);
		If(Event Player.checkpointA[9]);
            Call Subroutine(CreatePlayerEnemyBot);
		End;
		Call Subroutine(CreatePlayerHUDAndEffects);
		Call Subroutine(GetCurrentCheckpoint);
		If(!Event Player.finished);
			Call Subroutine(SetCurrentAbilities);
		End;
		Call Subroutine(TeleportCurrentBot);
		Call Subroutine(DisplayCurrentAbilityMsgs);
		Start Rule(CreateCurrentEffects, Restart Rule);
		Call Subroutine(CreateCurrentWorldText);
		Start Rule(DisplayCurrentCustomBigMsgs, Do Nothing);
		Start Rule(DisplayCurrentCustomSmallMsgs, Do Nothing);
	}
}

rule("Switch Edit Mode")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.EditMode == True;
		Event Player == Host Player;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.editMode < 6;
	}

	actions
	{
        Abort If(Is True For Any(Remove From Array(Global.buttonsArray, Button(Interact)), Is Button Held(Event Player,
			Current Array Element)));
		Wait Until(!Is Button Held(Event Player, Button(Interact)), 9999);
		Wait Until(Is Button Held(Event Player, Button(Interact)), 0.300);
		If(Is Button Held(Event Player, Button(Interact)));
			Event Player.editMode += Event Player.editMode == 5 ? -4 : 1;
			Event Player.nearestOrb = Null;
			Call Subroutine(KillOrResurrectBot);
			Small Message(All Players(All Teams), Custom String("   current mode: {0} mode", Array(Null, Custom String("Checkpoint"), Custom String(
				"Orb"), Custom String("Sphere"), Custom String("Cloud"), Custom String("Play"))[Event Player.editMode]));
			Play Effect(Event Player, Ring Explosion Sound, Null, Event Player, 100);
		End;
	}
}

rule("create / delete checkpoint, orb, sphere, cloud")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.EditMode == True;
		Event Player == Host Player;
		Is Button Held(Event Player, Button(Interact)) == True;
		(Is Button Held(Event Player, Button(Primary Fire)) || Is Button Held(Event Player, Button(Secondary Fire))) == True;
	}

	actions
	{
        Abort If(Is True For Any(Remove From Array(Global.buttonsArray, Array(Button(Interact), Button(Primary Fire), Button(Secondary Fire))), Is Button Held(
			Event Player, Current Array Element)));
		If(Is Button Held(Event Player, Button(Primary Fire)));
			If(Event Player.editMode == 1);
				"0, checkponit position\n1, checkpoint radius\n2, crouch\n3, bot, default empty array(BotVector, NeedResurrect, RefreshAbility1)\n4, unlimited ga\n5, teleport, defalut false\n6, orb, default empty array\n7, sphere, default empty array\n8, cloud, default empty array"
				Global.Checkpoint[Count Of(Global.Checkpoint)] = Array(Position Of(Event Player), Global.NewCheckpointDefaultRadius,
			Global.NewCheckpointDefaultCtrl, Array(False, False, Global.rezrefresh), Global.NewCheckpointDefaultMaxRefresh, False, Empty Array,
			Empty Array, Empty Array, Array(False, Global.enmyrfdefault, False, False, Global.rezrefresh), Global.rezonpoint);
                "9, enemy bot, default empty array(botvector, refreshability1 on kill, refresh vector)"
				Event Player.checkpoint = Count Of(Global.Checkpoint) - 1;
				Call Subroutine(GetCurrentCheckpoint);
				Call Subroutine(TeleportCurrentBot);
				Start Rule(CreateCurrentEffects, Restart Rule);
				Small Message(All Players(All Teams), Custom String("   New level created"));
			Else If(Event Player.editMode == 2);
				Call Subroutine(ErrorWarningMsg);
				If(Global.Error);
					Global.Error = False;
					Abort;
				End;
				"0, orb position\n1, bot position, default false"
				Event Player.currentOrb[Count Of(Event Player.currentOrb)] = Array((Position Of(Event Player) + Eye Position(Event Player)) / 2,
					False, False, True);
				Global.CurrentChooseOrb = Count Of(Event Player.currentOrb) - 1;
				Global.ChooseOrbPosition = Event Player.currentOrb[Global.CurrentChooseOrb][0];
				Global.Checkpoint[Event Player.checkpoint] = Mapped Array(Event Player.checkpointA,
					Current Array Index == 6 ? Event Player.currentOrb : Current Array Element);
				Call Subroutine(GetCurrentCheckpoint);
				Call Subroutine(KillOrResurrectBot);
				Call Subroutine(CreateNewEffect);
				Small Message(All Players(All Teams), Custom String("   New orb created"));
			Else If(Event Player.editMode == 3);
				Call Subroutine(ErrorWarningMsg);
				If(Global.Error);
					Global.Error = False;
					Abort;
				End;
				"0, sphere position\n1, sphere radius"
				Event Player.currentSphere[Count Of(Event Player.currentSphere)] = Array((Position Of(Event Player) + Eye Position(Event Player))
					/ 2, 4);
				Global.CurrentChooseSphere = Count Of(Event Player.currentSphere) - 1;
				Global.ChooseSpherePosition = Event Player.currentSphere[Global.CurrentChooseSphere][0];
				Global.Checkpoint[Event Player.checkpoint] = Mapped Array(Event Player.checkpointA,
					Current Array Index == 7 ? Event Player.currentSphere : Current Array Element);
				Call Subroutine(GetCurrentCheckpoint);
				Call Subroutine(CreateNewEffect);
				Small Message(All Players(All Teams), Custom String("   New sphere created"));
			Else If(Event Player.editMode == 4);
				Call Subroutine(ErrorWarningMsg);
				If(Global.Error);
					Global.Error = False;
					Abort;
				End;
				"0, cloud position\n1, cloud level"
				Event Player.currentCloud[Count Of(Event Player.currentCloud)] = Array(Position Of(Event Player), 8);
				Global.CurrentChooseCloud = Count Of(Event Player.currentCloud) - 1;
				Global.ChooseCloudPosition = Event Player.currentCloud[Global.CurrentChooseCloud][0];
				Global.Checkpoint[Event Player.checkpoint] = Mapped Array(Event Player.checkpointA,
					Current Array Index == 8 ? Event Player.currentCloud : Current Array Element);
				Call Subroutine(GetCurrentCheckpoint);
				Call Subroutine(CreateNewEffect);
				Small Message(All Players(All Teams), Custom String("   New cloud created"));
			End;
			Play Effect(Event Player, Buff Impact Sound, Null, Event Player.editMode != 7 ? Event Player : Null, 100);
		Else If(Weapon(Event Player) == 2);
			If(Event Player.editMode == 1);
				Call Subroutine(ErrorWarningMsg);
				If(Global.Error);
					Global.Error = False;
					Abort;
				End;
				Modify Global Variable(Checkpoint, Remove From Array By Index, Event Player.checkpoint);
				If(Global.Checkpoint[0]);
					Teleport(Event Player,
						Event Player.checkpoint > 0 ? Global.Checkpoint[Event Player.checkpoint - 1][0] : Global.Checkpoint[Event Player.checkpoint][0]);
					Event Player.checkpoint -= Event Player.checkpoint > 0 ? 1 : 0;
				End;
				Call Subroutine(GetCurrentCheckpoint);
				If(!Event Player.finished && !Event Player.freeMode);
					Call Subroutine(SetCurrentAbilities);
				End;
				Call Subroutine(KillOrResurrectBot);
				Call Subroutine(DisplayCurrentAbilityMsgs);
				Start Rule(CreateCurrentEffects, Restart Rule);
				Small Message(All Players(All Teams), Custom String("   The selected checkpoint has been deleted"));
				If(Count Of(Global.Checkpoint) - 1 < 0 && Entity Exists(Event Player.enmy));
					Destroy Dummy Bot(Opposite Team Of(Team Of(Event Player)), Slot Of(Event Player.enmy));
				End;
			Else If(Event Player.editMode == 2);
				Call Subroutine(ErrorWarningMsg);
				If(Global.Error);
					Global.Error = False;
					Abort;
				End;
				Modify Player Variable(Event Player, currentOrb, Remove From Array By Index, Global.CurrentChooseOrb);
				Destroy Effect(Event Player.orbEffects[Global.CurrentChooseOrb]);
				Modify Player Variable(Event Player, orbEffects, Remove From Array By Index, Global.CurrentChooseOrb);
				Destroy Icon(Event Player.orbIcons[Global.CurrentChooseOrb]);
				Modify Player Variable(Event Player, orbIcons, Remove From Array By Index, Global.CurrentChooseOrb);
				Destroy Icon(Event Player.botIcons[Global.CurrentChooseOrb]);
				Modify Player Variable(Event Player, botIcons, Remove From Array By Index, Global.CurrentChooseOrb);
				Destroy Effect(Event Player.botEffects[Global.CurrentChooseOrb]);
				Modify Player Variable(Event Player, botEffects, Remove From Array By Index, Global.CurrentChooseOrb);
				Global.CurrentChooseOrb -= Global.CurrentChooseOrb > 0 ? 1 : 0;
				Global.ChooseOrbPosition = Event Player.currentOrb[Global.CurrentChooseOrb][0];
				Global.Checkpoint[Event Player.checkpoint] = Mapped Array(Event Player.checkpointA,
					Current Array Index == 6 ? Event Player.currentOrb : Current Array Element);
				Call Subroutine(GetCurrentCheckpoint);
				Call Subroutine(KillOrResurrectBot);
				Small Message(All Players(All Teams), Custom String("   The selected orb has been deleted"));
			Else If(Event Player.editMode == 3);
				Call Subroutine(ErrorWarningMsg);
				If(Global.Error);
					Global.Error = False;
					Abort;
				End;
				Modify Player Variable(Event Player, currentSphere, Remove From Array By Index, Global.CurrentChooseSphere);
				Destroy Effect(Event Player.sphereEffects[Global.CurrentChooseSphere]);
				Modify Player Variable(Event Player, sphereEffects, Remove From Array By Index, Global.CurrentChooseSphere);
				Global.CurrentChooseSphere -= Global.CurrentChooseSphere > 0 ? 1 : 0;
				Global.ChooseSpherePosition = Event Player.currentSphere[Global.CurrentChooseSphere][0];
				Global.Checkpoint[Event Player.checkpoint] = Mapped Array(Event Player.checkpointA,
					Current Array Index == 7 ? Event Player.currentSphere : Current Array Element);
				Call Subroutine(GetCurrentCheckpoint);
				Small Message(All Players(All Teams), Custom String("   The selected sphere has been deleted"));
			Else If(Event Player.editMode == 4);
				Call Subroutine(ErrorWarningMsg);
				If(Global.Error);
					Global.Error = False;
					Abort;
				End;
				Modify Player Variable(Event Player, currentCloud, Remove From Array By Index, Global.CurrentChooseCloud);
				Destroy Effect(Event Player.cloudEffects[Global.CurrentChooseCloud]);
				Modify Player Variable(Event Player, cloudEffects, Remove From Array By Index, Global.CurrentChooseCloud);
				Global.CurrentChooseCloud -= Global.CurrentChooseCloud > 0 ? 1 : 0;
				Global.ChooseCloudPosition = Event Player.currentCloud[Global.CurrentChooseCloud][0];
				Global.Checkpoint[Event Player.checkpoint] = Mapped Array(Event Player.checkpointA,
					Current Array Index == 8 ? Event Player.currentCloud : Current Array Element);
				Call Subroutine(GetCurrentCheckpoint);
				Small Message(All Players(All Teams), Custom String("   The selected cloud has been deleted"));
			End;
			Play Effect(Event Player, Debuff Impact Sound, Null, Event Player.editMode != 7 ? Event Player : Null, 100);
		End;
	}
}

rule("Move checkpoint")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.EditMode == True;
		Count Of(Global.Checkpoint) > 0;
		Event Player == Host Player;
		Event Player.editMode == 1;
		Is Button Held(Event Player, Button(Ability 2)) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
	}

	actions
	{
        Abort If(Is True For Any(Remove From Array(Global.buttonsArray, Array(Button(Interact), Button(Ability 2))), Is Button Held(
			Event Player, Current Array Element)));
		Global.Checkpoint[Event Player.checkpoint] = Mapped Array(Event Player.checkpointA, Current Array Index == 0 ? Position Of(
			Event Player) : Current Array Element);
		Call Subroutine(GetCurrentCheckpoint);
		Small Message(All Players(All Teams), Custom String("   Moved checkpoint to player position"));
		Play Effect(Event Player, Buff Explosion Sound, Null, Event Player, 100);
	}
}

rule("Insert point")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.EditMode == True;
		Event Player.finished == False;
		Event Player.editMode == 1;
		Event Player == Host Player;
		Is Button Held(Event Player, Button(Melee)) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
	}

	actions
	{
        Abort If(Is True For Any(Remove From Array(Global.buttonsArray, Array(Button(Melee), Button(Interact))), Is Button Held(
			Event Player, Current Array Element)));
		Global.TempArray = Array Slice(Global.Checkpoint, Event Player.checkpoint + 1, Count Of(Global.Checkpoint));
		Global.Checkpoint = Array Slice(Global.Checkpoint, 0, Event Player.checkpoint + 1);
		Global.Checkpoint[Count Of(Global.Checkpoint)] = Array(Position Of(Event Player), Global.NewCheckpointDefaultRadius,
			Global.NewCheckpointDefaultCtrl, Array(False, False, Global.rezrefresh), Global.NewCheckpointDefaultMaxRefresh, False, Empty Array,
			Empty Array, Empty Array, Array(False, Global.enmyrfdefault, False, False, Global.rezrefresh), Global.rezonpoint);
		Modify Global Variable(Checkpoint, Append To Array, Global.TempArray);
		Event Player.checkpoint += 1;
		Call Subroutine(GetCurrentCheckpoint);
		Call Subroutine(TeleportCurrentBot);
		Start Rule(CreateCurrentEffects, Restart Rule);
		Wait(0.100, Ignore Condition);
		Small Message(All Players(All Teams), Custom String("   Already at level{0} and level{1} between Insertion point",
			Event Player.checkpoint - 1, Event Player.checkpoint));
		Play Effect(Event Player, Buff Impact Sound, Null, Event Player, 100);
	}
}

rule("Create / Delete bot")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.EditMode == True;
		(Event Player.editMode < 3 || Event Player.editMode == 6) == True;
		Event Player == Host Player;
		Is Button Held(Event Player, Button(Melee)) == True;
		(Is Button Held(Event Player, Button(Primary Fire)) || Is Button Held(Event Player, Button(Secondary Fire)) || Is Button Held(Event Player, Button(Ability 2))) == True;
	}

	actions
	{
        Abort If(Is True For Any(Remove From Array(Global.buttonsArray, Array(Button(Melee), Button(Ability 2), Button(Primary Fire), Button(Secondary Fire))), Is Button Held(
			Event Player, Current Array Element)));
		Call Subroutine(ErrorWarningMsg);
		If(Global.Error);
			Global.Error = False;
			Abort;
		End;
		If(Weapon(Event Player) == 2 && (Event Player.editMode != 2) && (Is Button Held(Event Player, Button(Primary Fire)) || Is Button Held(Event Player, Button(Secondary Fire))));
            If(Is Button Held(Event Player, Button(Primary Fire)));
                Global.Checkpoint[Event Player.checkpoint] = Mapped Array(Event Player.checkpointA, Current Array Index == 9 ? Array(Position Of(
		    		Event Player), Current Array Element[1], Current Array Element[2], Current Array Element[3], Current Array Element[4]) : Current Array Element);
                Play Effect(Event Player, Buff Explosion Sound, Null, Event Player, 100);
            Else;
		    	Global.Checkpoint[Event Player.checkpoint] = Mapped Array(Event Player.checkpointA, Current Array Index == 9 ? Array(False, 
			    	Global.enmyrfdefault, False, False, Global.rezrefresh) : Current Array Element);
				Play Effect(Event Player, Explosion Sound, Null, Event Player, 100);
    		End;
            Call Subroutine(GetCurrentCheckpoint);
			If(!Entity Exists(Event Player.enmy) && Event Player.checkpointA[9]);
				Wait(0.016, Ignore Condition);
            	Call Subroutine(CreatePlayerEnemyBot);
			End;
            Call Subroutine(TeleportCurrentBot);
            Small Message(All Players(All Teams), Event Player.checkpointA[9] ? Custom String("   Created/Moved Enemy Bot") : Custom String(
				"   Enemy Bot Deleted"));
            If(Is In Spawn Room(Event Player) && Event Player.checkpointA[9]);
				Wait(0.016, Ignore Condition);
				Global.Checkpoint[Event Player.checkpoint] = Mapped Array(Event Player.checkpointA, Current Array Index == 9 ? Array(False, 
			    	Global.enmyrfdefault, False, False, Global.rezrefresh) : Current Array Element);
				Call Subroutine(GetCurrentCheckpoint);
                Call Subroutine(TeleportCurrentBot);
                Small Message(All Players(All Teams), Custom String("   spawn detected — enemy bot deleted."));
				Small Message(All Players(All Teams), Custom String("   please do not place enemy bots in spawn."));
			Else If(Event Player.checkpointA[9][2] && !Event Player.checkpointA[9][0]);
				Global.Checkpoint[Event Player.checkpoint] = Mapped Array(Event Player.checkpointA, Current Array Index == 9 ? Array(Current Array Element[0], 
			    	Global.enmyrfdefault, False, False, Global.rezrefresh) : Current Array Element);
				Small Message(All Players(All Teams), Custom String("   Refresh Bot removed & Resetting refresh to default"));
			Else If(Event Player.checkpointA[9] && Is Dead(Event Player.enmy));
				Resurrect(Event Player.enmy);
            End;
        Else If(Event Player.editMode != 2 && Is Button Held(Event Player, Button(Ability 2)));
            If(Weapon(Event Player) == 1);
                Global.Checkpoint[Event Player.checkpoint] = Mapped Array(Event Player.checkpointA, Current Array Index == 9 ? Array(Current Array Element[0], 
                True, Position Of(Event Player), False, Current Array Element[4]) : Current Array Element);
                Play Effect(Event Player, Buff Impact Sound, Null, Event Player, 100);
				Call Subroutine(GetCurrentCheckpoint);
				Call Subroutine(TeleportBotTokillRefreshPosition);
            Else;
		    	Global.Checkpoint[Event Player.checkpoint] = Mapped Array(Event Player.checkpointA, Current Array Index == 9 ? Array(Current Array Element[0], 
			    	Global.enmyrfdefault, False, False, Global.rezrefresh) : Current Array Element);
                Play Effect(Event Player, Debuff Impact Sound, Null, Event Player, 100);
				Call Subroutine(GetCurrentCheckpoint);
				Call Subroutine(TeleportCurrentBot);
    		End;
			Small Message(All Players(All Teams), Event Player.checkpointA[9][2] ? Custom String("   Created/Moved Refresh Bot") : Custom String(
				"   Refresh Bot Deleted — Resetting refresh to default"));
		Else If(Event Player.editMode == 1);
            If(Weapon(Event Player) == 1 && (Is Button Held(Event Player, Button(Primary Fire)) || Is Button Held(Event Player, Button(Secondary Fire))));
			    If(Is Button Held(Event Player, Button(Primary Fire)));
				    Global.Checkpoint[Event Player.checkpoint] = Mapped Array(Event Player.checkpointA, Current Array Index == 3 ? Array(Position Of(
		    			Event Player), Current Array Element[1], Current Array Element[2]) : Current Array Element);
			    	Play Effect(Event Player, Buff Impact Sound, Null, Event Player, 100);
	    		Else;
		    		Global.Checkpoint[Event Player.checkpoint] = Mapped Array(Event Player.checkpointA, Current Array Index == 3 ? Array(False, False,
			    		Current Array Element[2]) : Current Array Element);
				    Play Effect(Event Player, Debuff Impact Sound, Null, Event Player, 100);
    			End;
	    		Call Subroutine(GetCurrentCheckpoint);
		    	If(!Event Player.finished && !Event Player.freeMode);
			    	Call Subroutine(SetCurrentAbilities);
	    		End;
		    	Call Subroutine(KillOrResurrectBot);
			    Small Message(All Players(All Teams), Event Player.checkpointA[3] ? Custom String("   Created/Moved Bot") : Custom String(
				    "   Bot Deleted"));
			End;
		Else If(Event Player.editMode == 2);
			If(Is Button Held(Event Player, Button(Primary Fire)));
				Event Player.currentOrb[Global.CurrentChooseOrb] = Mapped Array(Event Player.currentOrb[Global.CurrentChooseOrb],
					Current Array Index == 1 ? Position Of(Event Player) : Current Array Element);
				Global.Checkpoint[Event Player.checkpoint] = Mapped Array(Event Player.checkpointA,
					Current Array Index == 6 ? Event Player.currentOrb : Current Array Element);
				Call Subroutine(GetCurrentCheckpoint);
				Call Subroutine(KillOrResurrectBot);
				Call Subroutine(CreateNewEffect);
				Small Message(All Players(All Teams), Custom String("   Created/Moved Bot"));
				Play Effect(Event Player, Buff Impact Sound, Null, Event Player, 100);
			Else;
				Event Player.currentOrb[Global.CurrentChooseOrb] = Mapped Array(Event Player.currentOrb[Global.CurrentChooseOrb],
					Current Array Index == 1 || Current Array Index == 2 ? False : Current Array Element);
				Global.Checkpoint[Event Player.checkpoint] = Mapped Array(Event Player.checkpointA,
					Current Array Index == 6 ? Event Player.currentOrb : Current Array Element);
				Call Subroutine(GetCurrentCheckpoint);
				Call Subroutine(KillOrResurrectBot);
				Call Subroutine(CreateNewEffect);
				Small Message(All Players(All Teams), Custom String("   Bot Deleted"));
				Play Effect(Event Player, Debuff Impact Sound, Null, Event Player, 100);
			End;
		End;
	}
}

rule("Choose checkpoint, orb, sphere, cloud")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.EditMode == True;
		Count Of(Global.Checkpoint) > 0;
		Event Player == Host Player;
		Is Button Held(Event Player, Button(Ability 2)) == True;
		(Is Button Held(Event Player, Button(Primary Fire)) || Is Button Held(Event Player, Button(Secondary Fire))) == True;
	}

	actions
	{
        Abort If(Is True For Any(Remove From Array(Global.buttonsArray, Array(Button(Ability 2), Button(Primary Fire), Button(Secondary Fire))), Is Button Held(
			Event Player, Current Array Element)));
		If(Event Player.editMode == 1 && Count Of(Global.Checkpoint) > 1);
			Call Subroutine(ChooseCheckpoint);
			Teleport(Event Player, Global.Checkpoint[Event Player.checkpoint][0]);
			Call Subroutine(GetCurrentCheckpoint);
			If(!Event Player.freeMode);
				Call Subroutine(SetCurrentAbilities);
			End;
			Call Subroutine(KillOrResurrectBot);
			Start Rule(CreateCurrentEffects, Restart Rule);
			Call Subroutine(CreateCurrentWorldText);
		Else If(Event Player.editMode == 2 && Count Of(Event Player.currentOrb) > 1);
			If(Is Button Held(Event Player, Button(Primary Fire)) && Global.CurrentChooseOrb < Count Of(Event Player.currentOrb) - 1);
				Global.CurrentChooseOrb += 1;
				Global.ChooseOrbPosition = Event Player.currentOrb[Global.CurrentChooseOrb][0];
				Call Subroutine(KillOrResurrectBot);
			Else If(Is Button Held(Event Player, Button(Secondary Fire)) && Global.CurrentChooseOrb > 0);
				Global.CurrentChooseOrb -= 1;
				Global.ChooseOrbPosition = Event Player.currentOrb[Global.CurrentChooseOrb][0];
				Call Subroutine(KillOrResurrectBot);
			End;
		Else If(Event Player.editMode == 3 && Count Of(Event Player.currentSphere) > 1);
			If(Is Button Held(Event Player, Button(Primary Fire)) && Global.CurrentChooseSphere < Count Of(Event Player.currentSphere) - 1);
				Global.CurrentChooseSphere += 1;
				Global.ChooseSpherePosition = Event Player.currentSphere[Global.CurrentChooseSphere][0];
			Else If(Is Button Held(Event Player, Button(Secondary Fire)) && Global.CurrentChooseSphere > 0);
				Global.CurrentChooseSphere -= 1;
				Global.ChooseSpherePosition = Event Player.currentSphere[Global.CurrentChooseSphere][0];
			End;
		Else If(Event Player.editMode == 4 && Count Of(Event Player.currentCloud) > 1);
			If(Is Button Held(Event Player, Button(Primary Fire)) && Global.CurrentChooseCloud < Count Of(Event Player.currentCloud) - 1);
				Global.CurrentChooseCloud += 1;
				Global.ChooseCloudPosition = Event Player.currentCloud[Global.CurrentChooseCloud][0];
			Else If(Is Button Held(Event Player, Button(Secondary Fire)) && Global.CurrentChooseCloud > 0);
				Global.CurrentChooseCloud -= 1;
				Global.ChooseCloudPosition = Event Player.currentCloud[Global.CurrentChooseCloud][0];
			End;
		End;
	}
}

rule("Switch crouch,teleport, unlimited ga, need resurrect")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.EditMode == True;
		(Event Player.editMode < 3 || Event Player.editMode >= 6) == True;
		Event Player == Host Player;
		Is Button Held(Event Player, Button(Interact)) == True;
		(Is Button Held(Event Player, Button(Crouch)) || Is Button Held(Event Player, Button(Jump)) || Is Button Held(Event Player, Button(
			Ultimate)) || Is Button Held(Event Player, Button(Reload)) || Is Button Held(Event Player, Button(Ability 1))) == True;
	}

	actions
	{
        Abort If(Is True For Any(Remove From Array(Global.buttonsArray, Array(Button(Crouch), Button(Jump), Button(Ultimate), Button(Reload), Button(Ability 1), Button(Interact))), Is Button Held(
			Event Player, Current Array Element)));
		Call Subroutine(ErrorWarningMsg);
		If(Global.Error);
			Global.Error = False;
			Abort;
		End;
		If(Event Player.editMode == 1);
			If(Is Button Held(Event Player, Button(Reload)));
				Global.Checkpoint[Event Player.checkpoint] = Mapped Array(Event Player.checkpointA, Current Array Index == 3 ? Array(
					Current Array Element[0], !Current Array Element[1], Current Array Element[2]) : Current Array Element);
				Call Subroutine(GetCurrentCheckpoint);
				Call Subroutine(KillOrResurrectBot);
				Set Ability 2 Enabled(Event Player, Event Player.checkpointA[3][1]);
				Event Player.ability2 = Event Player.checkpointA[3][1];
				Wait(0.100, Ignore Condition);
				Small Message(All Players(All Teams), Event Player.checkpointA[3][1] ? Custom String(
					"   Enabled resurrection")
					: Custom String("   Disabled resurrection"));
				Play Effect(Event Player, Buff Explosion Sound, Null, Event Player, 100);
			Else If(Is Button Held(Event Player, Button(Ability 1)) && (Weapon(Event Player) == 1));
				Global.Checkpoint[Event Player.checkpoint] = Mapped Array(Event Player.checkpointA, Current Array Index == 3 ? Array(
					Current Array Element[0], Current Array Element[1], !Current Array Element[2]) : Current Array Element);
				Call Subroutine(GetCurrentCheckpoint);
				Wait(0.100, Ignore Condition);
				Small Message(All Players(All Teams), Event Player.checkpointA[3][2] ? Custom String(
					"   Enabled GA refresh for this resurrection") : Custom String(
					"   Disabled GA refresh for this resurrection"));
				Play Effect(Event Player, Buff Explosion Sound, Null, Event Player, 100);
            Else If(Is Button Held(Event Player, Button(Ability 1)) && (Weapon(Event Player) == 2));
                Global.Checkpoint[Event Player.checkpoint] = Mapped Array(Event Player.checkpointA, Current Array Index == 9 ? Array(
					Current Array Element[0], !Current Array Element[1], Current Array Element[2], Current Array Element[3], Current Array Element[4]) : Current Array Element);
				Call Subroutine(GetCurrentCheckpoint);
				Wait(0.100, Ignore Condition);
				Small Message(All Players(All Teams), Event Player.checkpointA[9][1] ? Custom String(
					"   Enabled GA refresh for this kill") : Custom String(
					"   Disabled GA refresh for this kill"));
				Play Effect(Event Player, Buff Explosion Sound, Null, Event Player, 100);
			End;
		Else If(Event Player.editMode == 2);
			If(Is Button Held(Event Player, Button(Reload)));
				Event Player.currentOrb[Global.CurrentChooseOrb] = Mapped Array(Event Player.currentOrb[Global.CurrentChooseOrb],
					Current Array Index == 2 ? !Current Array Element : Current Array Element);
				Global.Checkpoint[Event Player.checkpoint] = Mapped Array(Event Player.checkpointA,
					Current Array Index == 6 ? Event Player.currentOrb : Current Array Element);
				Call Subroutine(GetCurrentCheckpoint);
				Call Subroutine(KillOrResurrectBot);
				Call Subroutine(CreateNewEffect);
				Wait(0.100, Ignore Condition);
				Small Message(All Players(All Teams), Event Player.nearestOrb[2] ? Custom String(
					"   Enabled resurrection for this orb")
					: Custom String("   Disabled resurrection for this orb"));
				Play Effect(Event Player, Buff Explosion Sound, Null, Event Player, 100);
			Else If(Is Button Held(Event Player, Button(Ability 1)));
				Event Player.currentOrb[Global.CurrentChooseOrb] = Mapped Array(Event Player.currentOrb[Global.CurrentChooseOrb],
					Current Array Index == 3 ? !Current Array Element : Current Array Element);
				Global.Checkpoint[Event Player.checkpoint] = Mapped Array(Event Player.checkpointA,
					Current Array Index == 6 ? Event Player.currentOrb : Current Array Element);
				Call Subroutine(GetCurrentCheckpoint);
				Call Subroutine(KillOrResurrectBot);
				Wait(0.100, Ignore Condition);
				Small Message(All Players(All Teams), Event Player.nearestOrb[3] ? Custom String(
					"   Enabled GA refresh for this orb resurrection") : Custom String(
					"   Disabled GA refresh for this orb resurrection"));
				Play Effect(Event Player, Buff Explosion Sound, Null, Event Player, 100);
			End;
		Else If(Event Player.editMode == 6);
			If(Is Button Held(Event Player, Button(Reload)));
				Global.Checkpoint[Event Player.checkpoint] = Mapped Array(Event Player.checkpointA, Current Array Index == 9 ? Array(
					Current Array Element[0], Current Array Element[1], Current Array Element[2], !Current Array Element[3], Current Array Element[4]) : Current Array Element);
				Call Subroutine(GetCurrentCheckpoint);
				Call Subroutine(KillOrResurrectBot);
				Set Ability 2 Enabled(Event Player, Event Player.checkpointA[9][3]);
				Event Player.ability2 = Event Player.checkpointA[9][3];
				Wait(0.100, Ignore Condition);
				Small Message(All Players(All Teams), Event Player.checkpointA[9][3] ? Custom String(
					"   Enabled resurrection")
					: Custom String("   Disabled resurrection"));
			Else If(Is Button Held(Event Player, Button(Ability 1)));
				Global.Checkpoint[Event Player.checkpoint] = Mapped Array(Event Player.checkpointA, Current Array Index == 9 ? Array(
					Current Array Element[0], Current Array Element[1], Current Array Element[2], Current Array Element[3], !Current Array Element[4]) : Current Array Element);
				Call Subroutine(GetCurrentCheckpoint);
				Wait(0.100, Ignore Condition);
				Small Message(All Players(All Teams), Event Player.checkpointA[3][2] ? Custom String(
					"   Enabled GA refresh for this resurrection") : Custom String(
					"   Disabled GA refresh for this resurrection"));
			End;
		Else If(Event Player.editMode == 7);
			If(Is Button Held(Event Player, Button(Crouch)));
				Global.Checkpoint[Event Player.checkpoint] = Mapped Array(Event Player.checkpointA,
					Current Array Index == 2 ? !Current Array Element : Current Array Element);
				Call Subroutine(GetCurrentCheckpoint);
				Set Crouch Enabled(Event Player, Event Player.checkpointA[2]);
				Call Subroutine(TeleportCurrentBot);
				Wait(0.100, Ignore Condition);
				Small Message(All Players(All Teams), Custom String("   {0} crouch", Event Player.checkpointA[2] ? Custom String(
					"Enabled") : Custom String("Disabled")));
				Play Effect(Event Player, Buff Explosion Sound, Null, Event Player, 100);
			Else If(Is Button Held(Event Player, Button(Jump)));
				Global.Checkpoint[Event Player.checkpoint] = Mapped Array(Event Player.checkpointA,
					Current Array Index == 5 ? !Current Array Element : Current Array Element);
				Call Subroutine(GetCurrentCheckpoint);
				Wait(0.100, Ignore Condition);
				Small Message(All Players(All Teams), Custom String("   Selected level teleport {0}", Event Player.checkpointA[5] ? Custom String(
					"Enabled ( Official game takes effect )") : Custom String("Disabled")));
				Play Effect(Event Player, Buff Explosion Sound, Null, Event Player, 100);
			Else If(Is Button Held(Event Player, Button(Ultimate)));
				Global.Checkpoint[Event Player.checkpoint] = Mapped Array(Event Player.checkpointA,
					Current Array Index == 4 ? !Current Array Element : Current Array Element);
				Call Subroutine(GetCurrentCheckpoint);
				Wait(0.100, Ignore Condition);
				Small Message(All Players(All Teams), Custom String("   Selected level GA has been set to {0}", Event Player.checkpointA[4] ? Custom String("Infinite uses") : Custom String("Single use")));
				Play Effect(Event Player, Buff Explosion Sound, Null, Event Player, 100);
			Else If(Is Button Held(Event Player, Button(Reload)));
				Global.Checkpoint[Event Player.checkpoint] = Mapped Array(Event Player.checkpointA,
					Current Array Index == 10 ? !Current Array Element : Current Array Element);
				Call Subroutine(GetCurrentCheckpoint);
				Wait(0.100, Ignore Condition);
	    		Small Message(All Players(All Teams), Custom String("   {0} landing on next checkpoint during resurrection", Event Player.checkpointA[10] ? Custom String(
					"Enabled") : Custom String("Disabled")));	
				Play Effect(Event Player, Buff Explosion Sound, Null, Event Player, 100);		
			End;
		End;
	}
}

rule("switch extra section + switch refresh section + swap back - maylanix ^-^")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Event Player.editMode == 1 || Event Player.editMode == 6 || Event Player.editMode == 7) == True;
		Event Player == Host Player;
		Is Button Held(Event Player, Button(Crouch)) == True;
        Is Button Held(Event Player, Button(Jump)) == True;
	}

	actions
	{
        Abort If(Is True For Any(Remove From Array(Global.buttonsArray, Array(Button(Crouch), Button(Jump))), Is Button Held(
			Event Player, Current Array Element)));
		Call Subroutine(ErrorWarningMsg);
		If(Global.Error);
			Global.Error = False;
			Abort;
		End;
        If(Weapon(Event Player) == 1);
            If(Event Player.editMode == 7);
                Event Player.editMode = 1;
            Else;
                Event Player.editMode = 7;
            End;
            Call Subroutine(TeleportCurrentBot);
        Else;
            If(Event Player.editMode == 6);
                Event Player.editMode = 1;
                Call Subroutine(TeleportCurrentBot);
            Else;
                Event Player.editMode = 6;
                Call Subroutine(TeleportBotTokillRefreshPosition);
			    If(!Event Player.checkpointA[9][3]);
				    Resurrect(Event Player.targetBot);
			    End;
            End;
        End;
		Small Message(All Players(All Teams), Custom String("   current mode: {0} mode", Array(Null, Custom String("Checkpoint"), Custom String(
				"Orb"), Custom String("Sphere"), Custom String("Cloud"), Custom String("Play"), Custom String("Refresh"), Custom String("Extra Options"))[Event Player.editMode]));
        Play Effect(Event Player, Buff Explosion Sound, Null, Event Player, 100);
	}
}

rule("Modify the size of the checkpoint / sphere / cloud")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.EditMode == True;
		Event Player.editMode != 2;
		Event Player == Host Player;
		Is Button Held(Event Player, Button(Jump)) == True;
        Is Button Held(Event Player, Button(Melee)) == True;
		(Is Button Held(Event Player, Button(Primary Fire)) || Is Button Held(Event Player, Button(Secondary Fire))) == True;
	}

	actions
	{
        Abort If(Is True For Any(Remove From Array(Global.buttonsArray, Array(Button(Jump), Button(Melee), Button(Primary Fire), Button(Secondary Fire))), Is Button Held(
			Event Player, Current Array Element)));
		If(Is Button Held(Host Player, Button(Primary Fire)));
			If(Weapon(Event Player) == 2 && Event Player.editMode == 7 && Count Of(Global.Checkpoint) > 0);
				Global.Checkpoint[Event Player.checkpoint] = Mapped Array(Event Player.checkpointA,
					Current Array Index == 1 ? Current Array Element + 0.050 : Current Array Element);
				Call Subroutine(GetCurrentCheckpoint);
				Wait(0.100, Ignore Condition);
				Loop If Condition Is True;
				Small Message(All Players(All Teams), Custom String("   Changed this level's radius to {0}", Event Player.checkpointA[1]));
				Play Effect(Event Player, Buff Explosion Sound, Null, Event Player, 100);
			Else If(Event Player.editMode == 3 && Count Of(Event Player.currentSphere) > 0);
				If(Global.Once);
					Call Subroutine(EditChoosedEffect);
					Global.Once = False;
				End;
				Event Player.currentSphere[Global.CurrentChooseSphere] = Mapped Array(Event Player.currentSphere[Global.CurrentChooseSphere],
					Current Array Index == 1 ? Current Array Element + 0.100 : Current Array Element);
				Wait(0.050, Ignore Condition);
				Loop If Condition Is True;
				Global.Once = True;
				Global.Checkpoint[Event Player.checkpoint] = Mapped Array(Event Player.checkpointA,
					Current Array Index == 7 ? Event Player.currentSphere : Current Array Element);
				Call Subroutine(GetCurrentCheckpoint);
				Call Subroutine(CreateNewEffect);
				Play Effect(Event Player, Buff Explosion Sound, Null, Event Player, 100);
			Else If(Event Player.editMode == 4 && Count Of(Event Player.currentCloud) > 0);
				Event Player.currentCloud[Global.CurrentChooseCloud] = Mapped Array(Event Player.currentCloud[Global.CurrentChooseCloud],
					Current Array Index == 1 ? Current Array Element + 1 : Current Array Element);
				Wait(0.100, Ignore Condition);
				Loop If Condition Is True;
				Global.Checkpoint[Event Player.checkpoint] = Mapped Array(Event Player.checkpointA,
					Current Array Index == 8 ? Event Player.currentCloud : Current Array Element);
				Call Subroutine(GetCurrentCheckpoint);
				Play Effect(Event Player, Buff Explosion Sound, Null, Event Player, 100);
			End;
		Else If(Is Button Held(Host Player, Button(Secondary Fire)));
			If(Weapon(Event Player) == 2 && Event Player.editMode == 7 && Count Of(Global.Checkpoint)
				> 0 && Event Player.checkpointA[1] > 0.500);
				Global.Checkpoint[Event Player.checkpoint] = Mapped Array(Event Player.checkpointA,
					Current Array Index == 1 ? Current Array Element - 0.050 : Current Array Element);
				Call Subroutine(GetCurrentCheckpoint);
				Wait(0.100, Ignore Condition);
				Loop If Condition Is True;
				Small Message(All Players(All Teams), Custom String("   Changed this level's radius to {0}", Event Player.checkpointA[1]));
				Play Effect(Event Player, Buff Explosion Sound, Null, Event Player, 100);
			Else If(Event Player.editMode == 3 && Count Of(Event Player.currentSphere)
					> 0 && Event Player.currentSphere[Global.CurrentChooseSphere][1] > 1);
				If(Global.Once);
					Call Subroutine(EditChoosedEffect);
					Global.Once = False;
				End;
				Event Player.currentSphere[Global.CurrentChooseSphere] = Mapped Array(Event Player.currentSphere[Global.CurrentChooseSphere],
					Current Array Index == 1 ? Current Array Element - 0.100 : Current Array Element);
				Wait(0.050, Ignore Condition);
				Loop If Condition Is True;
				Global.Once = True;
				Global.Checkpoint[Event Player.checkpoint] = Mapped Array(Event Player.checkpointA,
					Current Array Index == 7 ? Event Player.currentSphere : Current Array Element);
				Call Subroutine(GetCurrentCheckpoint);
				Call Subroutine(CreateNewEffect);
				Play Effect(Event Player, Buff Explosion Sound, Null, Event Player, 100);
			Else If(Event Player.editMode == 4 && Count Of(Event Player.currentCloud)
					> 0 && Event Player.currentCloud[Global.CurrentChooseCloud][1] > 1);
				Event Player.currentCloud[Global.CurrentChooseCloud] = Mapped Array(Event Player.currentCloud[Global.CurrentChooseCloud],
					Current Array Index == 1 ? Current Array Element - 1 : Current Array Element);
				Wait(0.100, Ignore Condition);
				Loop If Condition Is True;
				Global.Checkpoint[Event Player.checkpoint] = Mapped Array(Event Player.checkpointA,
					Current Array Index == 8 ? Event Player.currentCloud : Current Array Element);
				Call Subroutine(GetCurrentCheckpoint);
				Play Effect(Event Player, Buff Explosion Sound, Null, Event Player, 100);
			End;
		End;
	}
}

rule("Move Sphere / Cloud")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.EditMode == True;
		Event Player.editMode != 1;
		Event Player == Host Player;
		Is Button Held(Event Player, Button(Reload)) == True;
		(Is Button Held(Event Player, Button(Primary Fire)) || Is Button Held(Event Player, Button(Secondary Fire))) == True;
	}

	actions
	{
        Abort If(Is True For Any(Remove From Array(Global.buttonsArray, Array(Button(Reload), Button(Primary Fire), Button(Secondary Fire))), Is Button Held(
			Event Player, Current Array Element)));
		If(Is Button Held(Event Player, Button(Primary Fire)));
			If(Event Player.editMode == 2 && Count Of(Event Player.currentOrb) > 0);
				If(Global.Once);
					Call Subroutine(EditChoosedEffect);
					Global.Once = False;
				End;
				Chase Global Variable At Rate(ChooseOrbPosition, Eye Position(Event Player) + Facing Direction Of(Event Player) * (
					Distance Between(Position Of(Event Player), Global.ChooseOrbPosition) + 10), 1, Destination and Rate);
				Wait(0.016, Ignore Condition);
				Loop If Condition Is True;
				Stop Chasing Global Variable(ChooseOrbPosition);
				Global.Once = True;
				Event Player.currentOrb[Global.CurrentChooseOrb] = Mapped Array(Event Player.currentOrb[Global.CurrentChooseOrb],
					Current Array Index == 0 ? Global.ChooseOrbPosition : Current Array Element);
				Global.Checkpoint[Event Player.checkpoint] = Mapped Array(Event Player.checkpointA,
					Current Array Index == 6 ? Event Player.currentOrb : Current Array Element);
				Call Subroutine(GetCurrentCheckpoint);
				Call Subroutine(CreateNewEffect);
				Play Effect(Event Player, Buff Explosion Sound, Null, Event Player, 100);
			Else If(Event Player.editMode == 3 && Count Of(Event Player.currentSphere) > 0);
				If(Global.Once);
					Call Subroutine(EditChoosedEffect);
					Global.Once = False;
				End;
				Chase Global Variable At Rate(ChooseSpherePosition, Eye Position(Event Player) + Facing Direction Of(Event Player) * (
					Distance Between(Position Of(Event Player), Global.ChooseSpherePosition) + 10), 1, Destination and Rate);
				Wait(0.016, Ignore Condition);
				Loop If Condition Is True;
				Stop Chasing Global Variable(ChooseSpherePosition);
				Global.Once = True;
				Event Player.currentSphere[Global.CurrentChooseSphere] = Mapped Array(Event Player.currentSphere[Global.CurrentChooseSphere],
					Current Array Index == 0 ? Global.ChooseSpherePosition : Current Array Element);
				Global.Checkpoint[Event Player.checkpoint] = Mapped Array(Event Player.checkpointA,
					Current Array Index == 7 ? Event Player.currentSphere : Current Array Element);
				Call Subroutine(GetCurrentCheckpoint);
				Call Subroutine(CreateNewEffect);
				Play Effect(Event Player, Buff Explosion Sound, Null, Event Player, 100);
			Else If(Event Player.editMode == 4 && Count Of(Event Player.currentCloud) > 0);
				If(Global.Once);
					Call Subroutine(EditChoosedEffect);
					Global.Once = False;
				End;
				Chase Global Variable At Rate(ChooseCloudPosition, Eye Position(Event Player) + Facing Direction Of(Event Player) * (
					Distance Between(Position Of(Event Player), Global.ChooseCloudPosition) + 10), 1, Destination and Rate);
				Wait(0.016, Ignore Condition);
				Loop If Condition Is True;
				Stop Chasing Global Variable(ChooseCloudPosition);
				Global.Once = True;
				Event Player.currentCloud[Global.CurrentChooseCloud] = Mapped Array(Event Player.currentCloud[Global.CurrentChooseCloud],
					Current Array Index == 0 ? Global.ChooseCloudPosition : Current Array Element);
				Global.Checkpoint[Event Player.checkpoint] = Mapped Array(Event Player.checkpointA,
					Current Array Index == 8 ? Event Player.currentCloud : Current Array Element);
				Call Subroutine(GetCurrentCheckpoint);
				Call Subroutine(CreateNewEffect);
				Play Effect(Event Player, Buff Explosion Sound, Null, Event Player, 100);
			End;
		Else If(Is Button Held(Event Player, Button(Secondary Fire)));
			If(Event Player.editMode == 2 && Count Of(Event Player.currentOrb) > 0);
				If(Global.Once);
					Call Subroutine(EditChoosedEffect);
					Global.Once = False;
				End;
				Chase Global Variable At Rate(ChooseOrbPosition, Eye Position(Event Player) - Facing Direction Of(Event Player) * (
					Distance Between(Position Of(Event Player), Global.ChooseOrbPosition) + 10), 1, Destination and Rate);
				Wait(0.016, Ignore Condition);
				Loop If Condition Is True;
				Stop Chasing Global Variable(ChooseOrbPosition);
				Global.Once = True;
				Event Player.currentOrb[Global.CurrentChooseOrb] = Mapped Array(Event Player.currentOrb[Global.CurrentChooseOrb],
					Current Array Index == 0 ? Global.ChooseOrbPosition : Current Array Element);
				Global.Checkpoint[Event Player.checkpoint] = Mapped Array(Event Player.checkpointA,
					Current Array Index == 6 ? Event Player.currentOrb : Current Array Element);
				Call Subroutine(GetCurrentCheckpoint);
				Call Subroutine(CreateNewEffect);
				Play Effect(Event Player, Buff Explosion Sound, Null, Event Player, 100);
			Else If(Event Player.editMode == 3 && Count Of(Event Player.currentSphere) > 0);
				If(Global.Once);
					Call Subroutine(EditChoosedEffect);
					Global.Once = False;
				End;
				Chase Global Variable At Rate(ChooseSpherePosition, Eye Position(Event Player) - Facing Direction Of(Event Player) * (
					Distance Between(Position Of(Event Player), Global.ChooseSpherePosition) + 10), 1, Destination and Rate);
				Wait(0.016, Ignore Condition);
				Loop If Condition Is True;
				Stop Chasing Global Variable(ChooseSpherePosition);
				Global.Once = True;
				Event Player.currentSphere[Global.CurrentChooseSphere] = Mapped Array(Event Player.currentSphere[Global.CurrentChooseSphere],
					Current Array Index == 0 ? Global.ChooseSpherePosition : Current Array Element);
				Global.Checkpoint[Event Player.checkpoint] = Mapped Array(Event Player.checkpointA,
					Current Array Index == 7 ? Event Player.currentSphere : Current Array Element);
				Call Subroutine(GetCurrentCheckpoint);
				Call Subroutine(CreateNewEffect);
				Play Effect(Event Player, Buff Explosion Sound, Null, Event Player, 100);
			Else If(Event Player.editMode == 4 && Count Of(Event Player.currentCloud) > 0);
				If(Global.Once);
					Call Subroutine(EditChoosedEffect);
					Global.Once = False;
				End;
				Chase Global Variable At Rate(ChooseCloudPosition, Eye Position(Event Player) - Facing Direction Of(Event Player) * (
					Distance Between(Position Of(Event Player), Global.ChooseCloudPosition) + 10), 1, Destination and Rate);
				Wait(0.016, Ignore Condition);
				Loop If Condition Is True;
				Stop Chasing Global Variable(ChooseCloudPosition);
				Global.Once = True;
				Event Player.currentCloud[Global.CurrentChooseCloud] = Mapped Array(Event Player.currentCloud[Global.CurrentChooseCloud],
					Current Array Index == 0 ? Global.ChooseCloudPosition : Current Array Element);
				Global.Checkpoint[Event Player.checkpoint] = Mapped Array(Event Player.checkpointA,
					Current Array Index == 8 ? Event Player.currentCloud : Current Array Element);
				Call Subroutine(GetCurrentCheckpoint);
				Call Subroutine(CreateNewEffect);
				Play Effect(Event Player, Buff Explosion Sound, Null, Event Player, 100);
			End;
		End;
	}
}

rule("Export data")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.EditMode == True;
		Count Of(Global.Checkpoint) > 0;
		Is Button Held(Host Player, Button(Crouch)) == True;
		Is Button Held(Host Player, Button(Ability 1)) == True;
		Z Component Of(Throttle Of(Host Player)) == -1 * 1;
	}

	actions
	{
		Wait(2, Abort When False);
		Call Subroutine(ClearRedundantData);
		Enable Inspector Recording;
		Disable Inspector Recording;
		Destroy All In-World Text;
		Destroy All HUD Text;
		Destroy All Icons;
		Destroy All Effects;
		Disable Hero Hud(Host Player);
		Start Camera(All Players(All Teams), Vector(0, -998, 0), Vector(0, -999, 0), 0);
		Create HUD Text(Host Player, Custom String("instructions"), Null, Null, Top, 0, Color(Rose), Null, Null, Visible To,
			Default Visibility);
		"open inspector"
		Create HUD Text(All Players(All Teams), Custom String("1. Open the workshop inspector"), Null, Null, Top, 1, Color(Aqua), Null, Null, 
			Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Custom String(
			"1. To access the workshop inspector, press [Esc] on PC or [Start] on console.\n2. Find & press [Open Workshop Inspector]."), Null, Top, 2, Null, Color(White), Null, 
			Visible To and String, Default Visibility);
		"grabbing map info"
		Create HUD Text(All Players(All Teams), Custom String("2. Grab your map info"), Null, Null, Top, 3, Color(Aqua), Null, Null, 
			Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Custom String(
			"1. At the bottom right of the window, change the variable target from [auto] to [global]. \n{0}", Custom String("2. Click the (X) at the bottom of the window to copy your data.\n{0}", 
			Custom String("3. Exit the inspector with [Esc] or [Start]."))), Null, Top, 4, Null, Color(White), Null, 
			Visible To and String, Default Visibility);
		"open editor"
		Create HUD Text(All Players(All Teams), Custom String("3. Open the workshop editor"), Null, Null, Top, 5, Color(Aqua), Null, Null, 
			Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Custom String(
			"1. To access the workshop editor, press [Esc] on PC or [Start] on console.\n2. Find & press [Open Workshop Editor]."), Null, Top, 6, Null, Color(White), Null, 
			Visible To and String, Default Visibility);
		"pasting map info"
		Create HUD Text(All Players(All Teams), Custom String("4. Paste your map info"), Null, Null, Top, 7, Color(Aqua), Null, Null, 
			Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Custom String(
			"1. Scroll all the way to the top of the list. \n{0}", Custom String("2. Open the rule titled [paste checkpoint data here] with the arrow on the left.\n{0}", 
			Custom String("3. Make sure there is no data inside the rule before proceeding [if there is, delete it].\n{0}", Custom String("4. Press the orange (+) button in the actions section to paste your data.\n{0}", 
			Custom String("5. There should now be (1) action starting with Global.checkpoint, restart the steps if this isn't the case."))))), Null, Top, 8, Null, Color(White), Null, 
			Visible To and String, Default Visibility);
		"turn off edit mode"
		Create HUD Text(All Players(All Teams), Custom String("5. Turn off edit mode"), Null, Null, Top, 9, Color(Aqua), Null, Null, 
			Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Custom String(
			"1. Access the lobby settings; Press [Esc] on PC or [Start] on console. \n{0}", Custom String("2. Find and press [Show lobby] & Open the settings menu on the right, between [move] and [invite].\n{0}", 
			Custom String("3. Find the Orange [Workshop Settings] menu, open it.\n{0}", Custom String("4. Set edit mode to 'off' [the first setting].")))), Null, Top, 10, Null, Color(White), Null, 
			Visible To and String, Default Visibility);
		"create code"
		Create HUD Text(All Players(All Teams), Custom String("6. Create your map code"), Null, Null, Top, 11, Color(Aqua), Null, Null, 
			Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Custom String(
			"1. Press [Esc] on PC or [Start] on console to return to the lobby settings. \n{0}", Custom String("2. Do not forget this last step or you will accidentally save your map in edit mode.\n{0}", 
			Custom String("3. Under summary, on the right, find and press the [share code] button.\n{0}", Custom String("4. Create a new code, or upload to an existing one.")))), 
			Null, Top, 12, Null, Color(White), Null, Visible To and String, Default Visibility);
		"final touches and customization"
		Create HUD Text(All Players(All Teams), Custom String("7. Personalize your map"), Null, Null, Top, 13, Color(Aqua), Null, Null, 
			Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Custom String(
			"1. From the lobby settings, open the workshop editor by pressing [Workshop]. \n{0}", 
			Custom String("2. Find & Open the rule titled [username, code + difficulty] and enter your information.\n{0}", Custom String("3. In the [setup] and [personalized config] rules, make any customization changes you would like.\n{0}", 
			Custom String("4. Feel free to add tips, msgs and custom player titles in the other [pink] rules.\n{0}", 
			Custom String("5. If you haven't yet; check out the orange workshop settings for more customization."))))), Null, Top, 14, Null, Color(White), Null, 
			Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Custom String("discord.gg/mercyparkour"), Null, Null, Top, 15, Color(Rose), Null, Null, 
			Visible To and String, Default Visibility);
		Big Message(All Players(All Teams), Custom String("Data exported"));
	}
}

rule("Arrival checkpoint")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.finished == False;
		Event Player.freeMode == False;
		Event Player.checkpointB == True;
		(Is On Ground(Event Player) || Is On Ground(Event Player) == Global.OnGround) == True;
		Is Dummy Bot(Event Player) == False;
		Distance Between(Event Player, Event Player.checkpointB[0]) <= Event Player.checkpointB[1];
	}

	actions
	{
		If(Count Of(Event Player.tempCurrentOrb) > 0);
			Call Subroutine(TeleportToCurrentCheckpoint);
			Small Message(Event Player, Custom String("{0}", Hero(Mercy)) == Custom String("메르시") ? Global.Config[22][1] : (Custom String(
				"{0}", Hero(Mercy)) == Custom String("天使") ? Global.Config[22][2] : Custom String("   {0}", Global.Config[22][0])));
			Play Effect(Event Player, Sombra Translocator Disappear Sound, Null, Event Player, 100);
			Abort;
		End;
        If(Is Alive(Event Player.enmy) && Event Player.checkpointA[9][0]);
            Call Subroutine(TeleportToCurrentCheckpoint);
            Small Message(Event Player, Custom String("   {0} must be defeated!", Global.enmybot));
            Play Effect(Event Player, Sombra Translocator Disappear Sound, Null, Event Player, 100);
		    Abort;
        End;
		If(!Is Alive(Event Player.targetBot) || Event Player.resurrectNumber != Event Player.numberOfNeedResurrect);
			If(Event Player.checkpointA[10]);
				Play Effect(Event Player, Widowmaker Venom Mine Explosion Sound, Null, Position Of(Event Player), 100);
            	Wait Until(!Is Using Ability 2(Event Player), 1.750);
            	Wait(0.016, Ignore Condition);
			End;
			If(Event Player.resurrectTime - 1.750 > 0.050 || Event Player.resurrectNumber != Event Player.numberOfNeedResurrect || !Event Player.checkpointA[10]);
				Small Message(Event Player.checkpointA[10] ? Event Player : Null, Distance Between(Event Player.targetBot, Event Player) >= 7 && Event Player.resurrectTime != 0 ? Custom String("   | rez cancelled — too far! |") : Custom String("   | begin rez before touching checkpoint |"));
				Wait(0.016, Ignore Condition);
				Call Subroutine(TeleportToCurrentCheckpoint);
				Small Message(!Event Player.checkpointA[10] ? Event Player : Null, Global.Config[33] ? Global.Config[33] : Custom String("   {0} needs to be resurrected to proceed.", Global.allybot));
				Play Effect(Event Player, Sombra Translocator Disappear Sound, Null, Event Player, 100);
				Abort;
			End;
		End;
		Event Player.checkpoint += 1;
		If(!Event Player.cheat);
			Call Subroutine(EditPlayerData);
		End;
		Call Subroutine(GetCurrentCheckpoint);
		Call Subroutine(SetCurrentAbilities);
		Call Subroutine(TeleportCurrentBot);
		If(!Entity Exists(Event Player.enmy) && Event Player.checkpointA[9]);
			Wait(0.016, Ignore Condition);
            Call Subroutine(CreatePlayerEnemyBot);
		End;
		Call Subroutine(DisplayCurrentAbilityMsgs);
		Start Rule(CreateCurrentEffects, Restart Rule);
		Call Subroutine(CreateCurrentWorldText);
		Start Rule(DisplayCurrentCustomBigMsgs, Do Nothing);
		Start Rule(DisplayCurrentCustomSmallMsgs, Do Nothing);
		If(Event Player.checkpoint < Count Of(Global.Checkpoint) - 1);
			Abort If(!Global.EditMode && Event Player.checkpointA[5]);
			Play Effect(Event Player, Buff Explosion Sound, Null, Event Player, 100);
		Else;
			Stop Chasing Player Variable(Event Player, time);
			If(!Global.EditMode && !Event Player.cheat);
				Event Player.bestRecord = Event Player.bestRecord && Event Player.bestRecord < Event Player.time ? Event Player.bestRecord : Event Player.time;
				Global.PlayersRecord[Index Of Array Value(Global.PlayersRecord, Event Player.playerNickname) > -1 ? Index Of Array Value(
					Global.PlayersRecord, Event Player.playerNickname) / 2 : Count Of(Global.PlayersRecord)] = Index Of Array Value(
					Global.PlayersRecord, Event Player.playerNickname) > -1 && First Of(Filtered Array(Global.PlayersRecord,
					Current Array Element[0] == Event Player.playerNickname))[1] < Event Player.time ? First Of(Filtered Array(
					Global.PlayersRecord, Current Array Element[0] == Event Player.playerNickname)) : Array(Event Player.playerNickname,
					Event Player.time);
				Global.Top5 = Array Slice(Sorted Array(Global.PlayersRecord, Current Array Element[1]), 0, 5);
				Big Message(All Players(All Teams), Custom String("{0}", Hero(Mercy)) == Custom String("메르시") ? Custom String(
					"{0}님이 {1}초로 결승선에 도달하였습니다!", Event Player.playerNickname, Event Player.time) : (Custom String("{0}", Hero(Mercy))
					== Custom String("天使") ? Custom String("{0} 已通关, 用时 {1} 秒!", Event Player.playerNickname, Event Player.time) : Custom String(
					"{0} finished in {1} seconds!", Event Player.playerNickname, Event Player.time)));
			End;
            If(!Event Player.editMode);
                Destroy Dummy Bot(Team Of(Event Player), Slot Of(Event Player) + Number Of Slots(All Teams));
                Destroy Dummy Bot(Opposite Team Of(Team Of(Event Player)), Slot Of(Event Player.enmy));
            End;
			Play Effect(All Players(All Teams), Ring Explosion Sound, Null, Event Player, 200);
		End;
	}
}

rule("Set status for players")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Has Status(Event Player, Invincible) == False;
        (Is Hero Being Played(Global.enmybot, Team Of(Event Player)) && Team Of(Event Player) == (Number Of Slots(Team 1)
		    > Number Of Slots(Team 2) ? Team 2 : Team 1)) == False;
	}

	actions
	{
		Clear Status(Event Player, Invincible);
		Disable Movement Collision With Players(Event Player);
		Wait(0.016, Ignore Condition);
		Set Status(Event Player, Null, Invincible, 9999);
		If(!Is Dummy Bot(Event Player));
			Wait(2, Ignore Condition);
			Start Scaling Player(Event Player, Event Player.bodySize, True);
			Start Modifying Hero Voice Lines(Event Player, Event Player.voice, True);
			Start Scaling Barriers(Event Player, Event Player.barrierSize, True);
		Else;
			Disable Built-In Game Mode Respawning(Event Player);
			"causes crashes - disabled"
			disabled If(Global.BotGravity);
				disabled Wait(0.016, Ignore Condition);
				disabled Set Gravity(Event Player, 0);
				disabled While(True);
					disabled If(!Has Status(Event Player, Invincible));
						disabled Set Status(Event Player, Null, Phased Out, 9999);
					disabled End;
					disabled If(Global.allybot == Hero(Mercy));
						disabled Start Holding Button(Event Player, Button(Jump));
						disabled Wait(30, Ignore Condition);
					disabled End;
				disabled End;
			disabled End;
		End;
	}
}

rule("Resurrection after death")
{
	event
	{
		Player Died;
		All;
		All;
	}

	conditions
	{
		Event Player.spectatorMode == False;
		Is Dummy Bot(Event Player) == False;
	}

	actions
	{
		If(!Event Player.finished && !Event Player.freeMode);
			Teleport(Event Player, Event Player.checkpointA[0]);
			Event Player.mistake += 1;
			Call Subroutine(SetCurrentAbilities);
			If(Event Player.currentOrb);
				Call Subroutine(TeleportCurrentBot);
			End;
		Else;
			Teleport(Event Player, Nearest Walkable Position(Position Of(Event Player)));
		End;
		Resurrect(Event Player);
	}
}

rule("Kill bot")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.numberOfNeedResurrect != 0;
		Is Alive(Event Player.targetBot) == True;
		((Event Player.killTargetBot && (Event Player.freeMode || Event Player.finished)) || (
			Event Player.ability2 && !Event Player.freeMode && !Event Player.finished)) == True;
	}

	actions
	{
		Kill(Event Player.targetBot, Null);
	}
}

rule("back point after landing")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.finished == False;
		Event Player.freeMode == False;
		Is On Ground(Event Player) == True;
		Is Dummy Bot(Event Player) == False;
		Distance Between(Event Player, Event Player.checkpointA[0]) > Event Player.checkpointA[1];
		Distance Between(Event Player, Event Player.checkpointB[0]) > Event Player.checkpointB[1];
		Array Contains(Array(-1, -1, -1), Event Player.checkpoint) == False;
	}

	actions
	{
		Call Subroutine(TeleportToCurrentCheckpoint);
	}
}

rule("Ga restrictions")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.finished == False;
		Event Player.freeMode == False;
		Event Player.checkpointA[4] == False;
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Event Player.currentCheckpoint = Event Player.checkpoint;
		Wait Until(!Is Using Ability 1(Event Player), 9999);
		If(Ability Cooldown(Event Player, Button(Ability 1))
			> 0 && (!Event Player.checkpointA[9][1] || Event Player.used || Is Alive(Event Player.enmy)) && !Event Player.freeMode && Event Player.checkpoint == Event Player.currentCheckpoint && (Is In Air(Event Player)
			|| Distance Between(Event Player, Event Player.checkpointA[0]) > Event Player.checkpointA[1]));
			Set Ability 1 Enabled(Event Player, False);
		End;
	}
}

rule("Refresh the ga after resurrecting the target")
{
	event
	{
		Ongoing - Each Player;
		All;
		Mercy;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Event Player.resurrectTime = 0;
		Chase Player Variable At Rate(Event Player, resurrectTime, 9999, 1, None);
		Wait Until(!Is Using Ability 2(Event Player), 1.750);
		Stop Chasing Player Variable(Event Player, resurrectTime);
		If(!Event Player.finished && !Event Player.freeMode);
			Set Ability 2 Enabled(Event Player, False);
			Event Player.ability2 = False;
		End;
		If(Absolute Value(Event Player.resurrectTime - 1.750) < 0.050);
			Event Player.resurrectNumber += 1;
			Resurrect(Event Player.targetBot);
			Small Message(Event Player, Custom String("{0}", Hero(Mercy)) == Custom String("메르시") ? Custom String("{0}",
				Global.Config[32][1]) : (Custom String("{0}", Hero(Mercy)) == Custom String("天使") ? Custom String("{0}", Global.Config[32][2])
				: Custom String("{0}", Custom String("   {0}", Global.Config[32][0]))));
			If(!Event Player.freeMode && !Event Player.finished && !Event Player.rezorb && ((Event Player.checkpointA[3][2] && !Event Player.nearestOrb) || (
				Event Player.nearestOrb[2] && Event Player.nearestOrb[3])));
				Set Ability 1 Enabled(Event Player, True);
				Small Message(Event Player, Custom String("{0}", Hero(Mercy)) == Custom String("메르시") ? Custom String("   {1} {0}",
					Global.Config[23][1], Ability Icon String(Hero(Mercy), Button(Ability 1))) : (Custom String("{0}", Hero(Mercy)) == Custom String("天使") 
					? Custom String("   {1} {0}", Global.Config[23][2], Ability Icon String(Hero(Mercy), Button(Ability 1)))
					: Custom String("   {1} {0}", Global.Config[23][0], Ability Icon String(Hero(Mercy), Button(Ability 1)))));
			End;
		End;
	}
}

rule("Get orb")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.tempCurrentOrb != Empty Array;
		Event Player.checkpointA == True;
		Is True For Any(Event Player.tempCurrentOrb, Distance Between(Event Player, Current Array Element[0]) <= 1.500 || Distance Between(
			Eye Position(Event Player), Current Array Element[0]) <= 1.500) == True;
	}

	actions
	{
		Event Player.nearestOrb = First Of(Filtered Array(Event Player.tempCurrentOrb, Distance Between(Event Player,
			Current Array Element[0]) <= 1.500 || Distance Between(Eye Position(Event Player), Current Array Element[0]) <= 1.500));
		Event Player.tempCurrentOrb = !Event Player.finished && !Event Player.freeMode ? Filtered Array(Event Player.tempCurrentOrb,
			Distance Between(Event Player, Current Array Element[0]) > 1.500 && Distance Between(Eye Position(Event Player),
			Current Array Element[0]) > 1.500) : Event Player.tempCurrentOrb;
		Small Message(Event Player, Custom String("{0}{1}", Custom String("{0}", Hero(Mercy)) == Custom String("메르시")
			? Global.Config[21][1] : (Custom String("{0}", Hero(Mercy)) == Custom String("天使")
			? Global.Config[21][2] : Custom String("   {0}", Global.Config[21][0])), Event Player.nearestOrb[1] && !Event Player.checkpointA[4] && (!Event Player.checkpointA[3][2] || Event Player.checkpointA[3][1]) ? Custom String(" {0}", Custom String("{0}", Hero(Mercy))
			== Custom String("메르시") ? Custom String("{1} {0}", Global.Config[23][1], Ability Icon String(Hero(Mercy), Button(Ability 1))) : (Custom String("{0}", Hero(Mercy)) == Custom String("天使")
			? Custom String("{1} {0}", Global.Config[23][2], Ability Icon String(Hero(Mercy), Button(Ability 1))) : Custom String("{1} {0}", Global.Config[23][0], Ability Icon String(Hero(Mercy), Button(Ability 1))))) : Custom String("")));
		Play Effect(Event Player, Brigitte Repair Pack Armor Sound, Null, Event Player, 100);
		If(!Is Alive(Event Player.targetBot) && !Event Player.freeMode && !Event Player.finished);
			Event Player.rezorb = True;
			Wait Until(!Is Using Ability 2(Event Player), 1.75);
			Wait(0.016, Ignore Condition);
			If(!Is Alive(Event Player.targetBot) || Event Player.resurrectNumber < 1);
				Call Subroutine(TeleportToCurrentCheckpoint);
				Small Message(Event Player, Global.Config[33] ? Custom String("   {0}", Global.Config[33]) : Custom String("   {0} needs to be resurrected to proceed.", Global.allybot));
				Play Effect(Event Player, Sombra Translocator Disappear Sound, Null, Event Player, 100);
				Event Player.rezorb = False;
				Abort;
			End;
		End;
		If(Event Player.nearestOrb[1] && (Event Player.editMode != 2 || (!Event Player.freeMode && !Event Player.finished)));
			If(Event Player.nearestOrb[2]);
				Set Ability 2 Enabled(Event Player, True);
				Kill(Event Player.targetBot, Null);
				Event Player.ability2 = True;
			Else If(!Is Alive(Event Player.targetBot));
				Resurrect(Event Player.targetBot);
			End;
			Call Subroutine(TeleportBotToRefreshPosition);
		End;
		Abort If(!Event Player.nearestOrb[1] || Event Player.freeMode || Event Player.finished || (
			Event Player.checkpointA[4] && Event Player.checkpointA[3][0]));
		Event Player.rezorb = False;
		Wait Until(!Is Using Ability 1(Event Player), 9999);
		Set Ability 1 Enabled(Event Player, True);

	}
}

rule("Back to point refresh ablities")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.finished == False;
		Event Player.freeMode == False;
		Event Player.checkpointA == True;
		Is On Ground(Event Player) == True;
		Distance Between(Event Player, Event Player.checkpointA[0]) <= Event Player.checkpointA[1];
	}

	actions
	{
		If(!Event Player.isSetAbilities);
			Call Subroutine(SetCurrentAbilities);
			If(Event Player.currentOrb);
				Call Subroutine(TeleportCurrentBot);
			End;
		End;
		Event Player.isSetAbilities = False;
	}
}

rule("Crouch disabled tips")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Crouch)) == True;
		Event Player.checkpointA[2] == False;
		Event Player.finished == False;
		Event Player.freeMode == False;
	}

	actions
	{
		Small Message(Event Player, Custom String("{0}", Hero(Mercy)) == Custom String("메르시") ? Global.Config[17][1] : (Custom String(
			"{0}", Hero(Mercy)) == Custom String("天使") ? Global.Config[17][2] : Custom String("   {0}", Global.Config[17][0])));
		Wait(1, Ignore Condition);
	}
}

rule("Landing initialization jump and bhop")
{
	event
	{
		Ongoing - Each Player;
		All;
		Mercy;
	}

	conditions
	{
		Is On Ground(Event Player) == True;
		Is Button Held(Event Player, Button(Jump)) == False;
	}

	actions
	{
		Event Player.jump = 1;
		Event Player.bhop = 0;
	}
}

rule("Pressing the space will lose the jump")
{
	event
	{
		Ongoing - Each Player;
		All;
		Mercy;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Jump)) == True;
		Event Player.jump == 1;
	}

	actions
	{
		Event Player.jump = 0;
	}
}

rule("Walking out of the platform or using the guardian angel without pressing the space will get a bhop and lose the jump")
{
	event
	{
		Ongoing - Each Player;
		All;
		Mercy;
	}

	conditions
	{
		Event Player.jump == 1;
		Is In Air(Event Player) == True;
		Is Button Held(Event Player, Button(Jump)) == False;
	}

	actions
	{
		Event Player.bhop = 1;
		Event Player.jump = 0;
	}
}

rule("Use bhop")
{
	event
	{
		Ongoing - Each Player;
		All;
		Mercy;
	}

	conditions
	{
		Event Player.bhop != 0;
		Is Jumping(Event Player) == True;
	}

	actions
	{
		Event Player.bhop = 0;
	}
}

rule("3rd person")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 2)) == True;
		Is Button Held(Event Player, Button(Reload)) == True;
		Is Button Held(Event Player, Button(Jump)) == False;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Event Player.third = !Event Player.third;
		If(Event Player.third);
			"by overclocking"
			Start Camera(Event Player, Ray Cast Hit Position(Event Player + Up * (Distance Between(Eye Position(Event Player), Event Player)
				+ 0.500), Ray Cast Hit Position(Event Player + Up * (Distance Between(Eye Position(Event Player), Event Player) + 0.500),
				Event Player + Up * (Distance Between(Eye Position(Event Player), Event Player) + 0.500) + Facing Direction Of(Event Player)
				* -3, Null, Event Player, True), Null, Event Player, True), Event Player + Facing Direction Of(Event Player) * 100, 100);
			Abort If(!Event Player.third);
			Small Message(Event Player, Custom String("3rd person enabled; press {0} + {1} to cancel", Input Binding String(Button(Reload)),
				Input Binding String(Button(Ability 2))));
		Else;
			Stop Camera(Event Player);
		End;
	}
}

rule("Back to point")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.checkpointA == True;
		(Event Player.finished && Event Player.editMode != 5) == False;
		(Is Button Held(Event Player, Button(Reload)) || Is Button Held(Event Player, Button(Ultimate))) == True;
		(Event Player.freeMode || (!Global.EditMode && (Event Player.checkpoint != 0 || Event Player.editMode != 5))) == False;
		(!Global.EditMode || Event Player.editMode != 2) == True;
	}

	actions
	{
		Abort If(Is True For Any(Remove From Array(Global.buttonsArray, Array(Button(Reload), Button(Jump), Button(Ultimate))), Is Button Held(
			Event Player, Current Array Element)));
		If((Is Button Held(Event Player, Button(Reload)) && Global.bkey == 0) || Is Button Held(Event Player, Button(Ultimate)) && Global.bkey == 1);
			Call Subroutine(TeleportToCurrentCheckpoint);
		End;
	}
}

rule("Free mode")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.finished == False;
		Is Button Held(Event Player, Button(Reload)) == True;
		Is Button Held(Event Player, Button(Melee)) == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		If(!Event Player.freeMode);
			Stop Chasing Player Variable(Event Player, time);
			Call Subroutine(EnableAllAbilities);
			Event Player.freeMode = !Event Player.freeMode;
			Small Message(Event Player, Custom String("{0}", Hero(Mercy)) == Custom String("메르시") ? Global.Config[15][1] : (Custom String(
				"{0}", Hero(Mercy)) == Custom String("天使") ? Global.Config[15][2] : Custom String("   {0}", Global.Config[15][0])));
            Set Damage Dealt(Event Player, 0);
		Else;
			If(!Event Player.movementCollision);
				Enable Movement Collision With Environment(Event Player);
				Event Player.movementCollision = True;
			End;
			Disallow Button(Event Player, Button(Primary Fire));
			Disallow Button(Event Player, Button(Secondary Fire));
			Call Subroutine(CreatePlayerTargetBot);
			If(!Entity Exists(Event Player.enmy) && Event Player.checkpointA[9]);
            	Call Subroutine(CreatePlayerEnemyBot);
			End;
			Wait(0.016, Ignore Condition);
			Set Ultimate Ability Enabled(Event Player, False);
			Call Subroutine(TeleportToCurrentCheckpoint);
			Call Subroutine(DisplayCurrentAbilityMsgs);
			If(Is Using Ultimate(Event Player));
				Kill(Event Player, Null);
				Resurrect(Event Player);
			End;
			Event Player.freeMode = !Event Player.freeMode;
			Call Subroutine(ContinueTiming);
			Allow Button(Event Player, Button(Primary Fire));
			Allow Button(Event Player, Button(Secondary Fire));
            Set Damage Dealt(Event Player, 100);
		End;
	}
}

rule("Spectator mode")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Is Button Held(Event Player, Button(Ability 2)) == True;
	}

	actions
	{
        Abort If(Is True For Any(Remove From Array(Global.buttonsArray, Array(Button(Ultimate), Button(Ability 2))), Is Button Held(
			Event Player, Current Array Element)));
		Event Player.spectatorMode = !Event Player.spectatorMode;
		If(Event Player.spectatorMode);
			Disable Built-In Game Mode Respawning(Event Player);
			Stop Chasing Player Variable(Event Player, time);
			Event Player.tp[0] = Position Of(Event Player);
			Kill(Event Player, Null);
			Wait(0.016, Ignore Condition);
			Teleport(Event Player, Vector(0, -999, 0));
			Small Message(Event Player, Custom String("{0}", Hero(Mercy)) == Custom String("메르시") ? Global.Config[16][1] : (Custom String(
				"{0}", Hero(Mercy)) == Custom String("天使") ? Global.Config[16][2] : Custom String("   {0}", Global.Config[16][0])));
		Else;
			Enable Built-In Game Mode Respawning(Event Player);
			Teleport(Event Player, Nearest Walkable Position(Position Of(Event Player)));
			Resurrect(Event Player);
			Call Subroutine(ContinueTiming);
		End;
	}
}

rule("Preview point")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.finished == False;
		Event Player.freeMode == False;
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
		Distance Between(Event Player, Event Player.checkpointA[0]) <= Event Player.checkpointA[1];
	}

	actions
	{
        Abort If(Is True For Any(Remove From Array(Global.buttonsArray, Array(Button(Primary Fire), Button(Secondary Fire))),
			Is Button Held(Event Player, Current Array Element)));
		If(Global.EditMode || !Global.PreviewPosition[Event Player.checkpoint]);
			Global.CheckpointBPosition = Event Player.checkpointB[0];
			Global.TempVar = Mapped Array(Global.TempVar, Distance Between(Global.CheckpointBPosition, Ray Cast Hit Position(
				Global.CheckpointBPosition, Global.CheckpointBPosition + Direction From Angles(Current Array Index * 30, -45) * 15, Null, Null,
				False)));
			While(Absolute Value(Count Of(Remove From Array(Global.TempVar, Last Of(Sorted Array(Global.TempVar, Current Array Element))))
				- 5.500) < 5.500);
				Global.TempVar = Mapped Array(Global.TempVar, Global.TempVar[(Current Array Index + 11)
					% 12] + Current Array Element + Global.TempVar[(Current Array Index + 1) % 12]);
			End;
			Global.PreviewPosition[Event Player.checkpoint] = Ray Cast Hit Position(Global.CheckpointBPosition,
				Global.CheckpointBPosition + 15 * Direction From Angles(30 * Index Of Array Value(Global.TempVar, Last Of(Sorted Array(
				Global.TempVar, Current Array Element))), -45), All Players(All Teams), Event Player, True);
		End;
		Set Facing(Event Player, Direction Towards(Global.PreviewPosition[Event Player.checkpoint], Event Player.checkpointB[0]),
			To World);
		Start Camera(Event Player, Ray Cast Hit Position(Event Player.checkpointB[0], Event Player.checkpointB[0] + Facing Direction Of(
			Event Player) * -15, Null, Null, False), Event Player.checkpointB[0], 30);
		Stop Chasing Player Variable(Event Player, time);
		Set Primary Fire Enabled(Event Player, False);
		Set Secondary Fire Enabled(Event Player, False);
		Set Status(Event Player, Null, Rooted, 9999);
		Small Message(Event Player, Custom String("{0}", Hero(Mercy)) == Custom String("메르시") ? Custom String("손을 떼면 {0} / {1} 취소됩니다",
			Input Binding String(Button(Primary Fire)), Input Binding String(Button(Secondary Fire))) : (Custom String("{0}", Hero(Mercy))
			== Custom String("天使") ? Custom String("松开 {0} / {1} 取消预览", Input Binding String(Button(Primary Fire)), Input Binding String(
			Button(Secondary Fire))) : Custom String("release {0} / {1} to cancel preview", Input Binding String(Button(Primary Fire)),
			Input Binding String(Button(Secondary Fire)))));
		Wait Until(!Is Button Held(Event Player, Button(Primary Fire)) || !Is Button Held(Event Player, Button(Secondary Fire))
			|| Is Button Held(Event Player, Button(Ability 2)) || Distance Between(Event Player, Event Player.checkpointA[0])
			> Event Player.checkpointA[1], 9999);
		Clear Status(Event Player, Rooted);
		Set Primary Fire Enabled(Event Player, True);
		Set Secondary Fire Enabled(Event Player, True);
		Stop Camera(Event Player);
		Set Facing(Event Player, Direction Towards(Event Player,
			Event Player.checkpointA[3][0] ? Event Player.checkpointA[3][0] : Event Player.checkpointB[0]), To World);
		Call Subroutine(ContinueTiming);
		Wait(0.250, Ignore Condition);
	}
}

rule("Back to saved level")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.EditMode == False;
		Event Player.cheat == True;
		Is Button Held(Event Player, Button(Ability 2)) == True;
		Is Button Held(Event Player, Button(Melee)) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
	}

	actions
	{
        Abort If(Is True For Any(Remove From Array(Global.buttonsArray, Array(Button(Ability 2), Button(Melee), Button(Interact))),
			Is Button Held(Event Player, Current Array Element)));
		Call Subroutine(TempSavePlayerData);
		Event Player.checkpoint = Event Player.playerData[0];
		Call Subroutine(SkipOrBackCheckpoint);
	}
}

rule("Interrupt Valkyrie")
{
	event
	{
		Ongoing - Each Player;
		All;
		Mercy;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
		Is Button Held(Event Player, Button(Melee)) == True;
	}

	actions
	{
		Wait Until(!Is Button Held(Event Player, Button(Melee)), 9999);
		Wait Until(Is Button Held(Event Player, Button(Melee)), 0.300);
		If(Is Button Held(Event Player, Button(Melee)));
			Event Player.tp[0] = Position Of(Event Player);
			Kill(Event Player, Null);
			Wait(0.016, Ignore Condition);
			Teleport(Event Player, Event Player.tp[0]);
		End;
	}
}

rule("set temporary checkpoint")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Event Player.freeMode || Event Player.finished) == True;
		Event Player.editMode < 2;
		(Is Button Held(Event Player, Button(Ability 2)) || Is Button Held(Event Player, Button(Reload))) == True;
	}

	actions
	{
        Abort If(Is True For Any(Remove From Array(Global.buttonsArray, Array(Button(Ability 2), Button(Reload))), Is Button Held(
			Event Player, Current Array Element)));
		If(Is Button Held(Event Player, Button(Ability 2)));
			Wait Until(!Is Button Held(Event Player, Button(Ability 2)), 9999);
			Wait Until(Is Button Held(Event Player, Button(Ability 2)), 0.200);
			If(Is Button Held(Event Player, Button(Ability 2)) && !Is Button Held(Event Player, Button(Jump)) && !Is Button Held(Event Player,
				Button(Primary Fire)) && !Is Button Held(Event Player, Button(Secondary Fire)) && (
				Event Player.freeMode || Event Player.finished));
				Event Player.tp[1] = Event Player.tp[1] ? False : Position Of(Event Player);
				If(Event Player.tp[1]);
					Small Message(Event Player, Custom String("{0}", Hero(Mercy)) == Custom String("메르시") ? Custom String("임시 CP 설정, {0} 로 돌아가기",
						Input Binding String(Button(Reload))) : (Custom String("{0}", Hero(Mercy)) == Custom String("天使") ? Custom String(
						"已设置临时传送点, 单击 {0} 使用", Input Binding String(Button(Reload))) : Custom String("Temporary cp has been set, press {0} to use",
						Input Binding String(Button(Reload)))));
				Else;
					Small Message(Event Player, Custom String("{0}", Hero(Mercy)) == Custom String("메르시") ? Custom String("삭제됨") : (Custom String(
						"{0}", Hero(Mercy)) == Custom String("天使") ? Custom String("已删除临时传送点") : Custom String("Temporary cp deleted")));
				End;
			End;
		Else If(Event Player.tp[1] && !Is Button Held(Event Player, Button(Melee)));
			Call Subroutine(CancelAbilityAndMomentum);
			Teleport(Event Player, Event Player.tp[1]);
		End;
	}
}

rule("Obstacle Sphere effect")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.currentSphere != Empty Array;
		Event Player.checkpointA == True;
		Is True For Any(Event Player.currentSphere, Distance Between(Event Player, Current Array Element[0])
			<= Current Array Element[1] || Distance Between(Eye Position(Event Player), Current Array Element[0])
			<= Current Array Element[1]) == True;
	}

	actions
	{
		If(!Event Player.finished && !Event Player.freeMode);
			Set Status(Event Player, Null, Burning, 0.150);
			Call Subroutine(TeleportToCurrentCheckpoint);
		Else;
			Set Status(Event Player, Null, Burning, 9999);
			Wait Until(Is True For All(Event Player.currentSphere, Distance Between(Event Player, Current Array Element[0])
				> Current Array Element[1] && Distance Between(Eye Position(Event Player), Current Array Element[0])
				> Current Array Element[1]), 9999);
			Clear Status(Event Player, Burning);
		End;
	}
}

rule("Elastic cloud effect")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.currentCloud != Empty Array;
		Event Player.checkpointA == True;
		(Altitude Of(Event Player) >= 0.030 || Is On Ground(Event Player)) == True;
		Is True For Any(Event Player.currentCloud, Distance Between(Event Player, Current Array Element[0]) <= 1.500) == True;
	}

	actions
	{
		Apply Impulse(Event Player, Up, First Of(Filtered Array(Event Player.currentCloud, Distance Between(Event Player,
			Current Array Element[0]) <= 1.500))[1], To World, Cancel Contrary Motion);
		Play Effect(Event Player, Baptiste Biotic Launcher Explosion Sound, Null, Event Player, 80);
	}
}

rule("Player left match, destroy the player`s mercy")
{
	event
	{
		Player Left Match;
		All;
		All;
	}

	actions
	{
		If(Array Contains(Global.ShowHotKeyPlayers, Event Player));
			Modify Global Variable(ShowHotKeyPlayers, Remove From Array By Value, Event Player);
		End;
		For Global Variable(I, 0, Number Of Slots(All Teams), 1);
			If(!Entity Exists(Players In Slot(Global.I, Number Of Slots(Team 1) > Number Of Slots(Team 2) ? Team 1 : Team 2)));
				Destroy Dummy Bot(Number Of Slots(Team 1) > Number Of Slots(Team 2) ? Team 1 : Team 2, Global.I + Number Of Slots(All Teams));
			End;
		End;
	}
}

rule("Destroy bot after player leaves v2 - gigamercy")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Event Player.enemy != Null;
		Array Contains(All Players(All Teams), Event Player.enemy) == False;
	}

	actions
	{
		Destroy Dummy Bot(Team Of(Event Player), Slot Of(Event Player));
	}
}

rule("Start timing after leaving the initial point")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.EditMode == False;
		Event Player.freeMode == False;
		Event Player.cheat == False;
		Event Player.leaveOriginalCheckpoint == False;
		Event Player.checkpointB == True;
		Distance Between(Event Player, Event Player.checkpointA[0]) > Event Player.checkpointA[1];
	}

	actions
	{
		Chase Player Variable At Rate(Event Player, time, 16200, 1, None);
		Event Player.leaveOriginalCheckpoint = True;
	}
}

rule("Return to the initial point to reset the timing")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.EditMode == False;
		Event Player.checkpoint == 0;
		Event Player.cheat == False;
		Distance Between(Event Player, Global.Checkpoint[0][0]) <= Global.Checkpoint[0][1];
	}

	actions
	{
		Stop Chasing Player Variable(Event Player, time);
		Event Player.time = 0;
		Event Player.mistake = 0;
		Event Player.leaveOriginalCheckpoint = False;
	}
}

rule("Restart")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Is Button Held(Event Player, Button(Interact)) && ((Is Button Held(Event Player, Button(Crouch)) && Is Button Held(Event Player, Button(Ability 2))) || Is Button Held(Event Player, Button(Ultimate)))) == True;
		((!Global.EditMode || Event Player != Host Player) || (Event Player.editMode == 5 && Count Of(Global.Checkpoint) > 0)) == True;
		(!Event Player.checkpointA[5] || Event Player.finished) == True;
	}

	actions
	{
        Abort If(Is True For Any(Remove From Array(Global.buttonsArray, Array(Button(Interact), Button(Ultimate), Button(Crouch), Button(Ability 2))), Is Button Held(
				Event Player, Current Array Element)));
		If((Is Button Held(Event Player, Button(Crouch)) && Is Button Held(Event Player, Button(Ability 2)) && Global.rkey == 1) || Is Button Held(Event Player, Button(Ultimate)) && Global.rkey == 0);
			Play Effect(Event Player, Tracer Recall Disappear Sound, Null, Event Player, 200);
			Teleport(Event Player, Global.Checkpoint[0][0]);
			If(Is Using Ultimate(Event Player));
				Kill(Event Player, Null);
				Resurrect(Event Player);
			End;
			Start Forcing Player To Be Hero(Event Player, Hero(Mercy));
			Call Subroutine(InitializePlayerVariables);
			Call Subroutine(EditPlayerData);
			Call Subroutine(CreatePlayerTargetBot);
			If(!Entity Exists(Event Player.enmy) && Event Player.checkpointA[9]);
            	Call Subroutine(CreatePlayerEnemyBot);
			End;
			Call Subroutine(GetCurrentCheckpoint);
			Set Ultimate Ability Enabled(Event Player, False);
			Call Subroutine(SetCurrentAbilities);
			Call Subroutine(TeleportCurrentBot);
			Call Subroutine(DisplayCurrentAbilityMsgs);
			Start Rule(CreateCurrentEffects, Restart Rule);
			Call Subroutine(CreateCurrentWorldText);
			Start Rule(DisplayCurrentCustomBigMsgs, Do Nothing);
			Start Rule(DisplayCurrentCustomSmallMsgs, Do Nothing);
			Set Damage Dealt(Event Player, 100);
			Play Effect(Event Player, Tracer Recall Reappear Sound, Null, Event Player, 200);
		End;
	}
}

rule("Next Point/ Prev Point")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 2)) == True;
		Is Button Held(Event Player, Button(Melee)) == True;
		(Is Button Held(Event Player, Button(Primary Fire)) || Is Button Held(Event Player, Button(Secondary Fire))) == True;
		((!Global.EditMode || Event Player != Host Player) || Event Player.editMode == 5) == True;
		Count Of(Global.Checkpoint) > 1;
		(!Event Player.checkpointA[5] || Global.EditMode) == True;
	}

	actions
	{
        Abort If(Is True For Any(Remove From Array(Global.buttonsArray, Array(Button(Melee), Button(Ability 2), Button(Primary Fire),
				Button(Secondary Fire))), Is Button Held(Event Player, Current Array Element)));
		Call Subroutine(TempSavePlayerData);
		Call Subroutine(ChooseCheckpoint);
		While(!Global.EditMode && Global.Checkpoint[Event Player.checkpoint][5]);
			Call Subroutine(ChooseCheckpoint);
		End;
		Call Subroutine(SkipOrBackCheckpoint);
	}
}

rule("Show or hide shortcuts")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Global.EditMode == False;
	}

	actions
	{
        Abort If(Is True For Any(Remove From Array(Global.buttonsArray, Button(Interact)), Is Button Held(Event Player,
			Current Array Element)));
		Wait Until(!Is Button Held(Event Player, Button(Interact)), 9999);
		Wait Until(Is Button Held(Event Player, Button(Interact)), 0.300);
		If(Is Button Held(Event Player, Button(Interact)));
			If(!Array Contains(Global.ShowHotKeyPlayers, Event Player));
				Modify Global Variable(ShowHotKeyPlayers, Append To Array, Event Player);
			Else;
				Modify Global Variable(ShowHotKeyPlayers, Remove From Array By Value, Event Player);
			End;
		End;
	}
}

rule("Teleport checkpoints")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.EditMode == False;
		Event Player.finished == False;
		Event Player.freeMode == False;
		Event Player.checkpointA[5] == True;
		Event Player.checkpointB == True;
		Distance Between(Event Player, Event Player.checkpointA[0]) <= Event Player.checkpointA[1];
	}

	actions
	{
		Wait(0.016, Ignore Condition);
		Teleport(Event Player, Event Player.checkpointB[0]);
	}
}

rule("Restart Match")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Total Time Elapsed > 16140;
	}

	actions
	{
		Big Message(All Players(All Teams), Custom String("1 Minute Warning"));
		Wait(60, Ignore Condition);
		Big Message(All Players(All Teams), Custom String("Match Time Is Up!"));
		Wait(2, Ignore Condition);
		Declare Team Victory(Team Of(Host Player));
		Wait(8, Ignore Condition);
		Restart Match;
	}
}

rule("Finished setting")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.checkpoint >= Count Of(Global.Checkpoint) - 1;
		Is Dummy Bot(Event Player) == False;
		Event Player.checkpoint != 0;
	}

	actions
	{
		Event Player.finished = True;
		Call Subroutine(EnableAllAbilities);
        Set Damage Dealt(Event Player, 0);
	}
}

rule("Not finished setting")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.checkpoint < Count Of(Global.Checkpoint) - 1;
		Is Dummy Bot(Event Player) == False;
	}

	actions
	{
		Event Player.finished = False;
		If(!Event Player.freeMode);
			Set Ultimate Ability Enabled(Event Player, False);
			If(!Event Player.movementCollision);
				Enable Movement Collision With Environment(Event Player);
				Event Player.movementCollision = True;
			End;
            Set Damage Dealt(Event Player, 100);
		End;
	}
}

rule("Set Ultimate Charge 100%")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Event Player.finished || Event Player.freeMode) == True;
		Ultimate Charge Percent(Event Player) < 100;
		Is Dummy Bot(Event Player) == False;
	}

	actions
	{
		If(Is Using Ultimate(Event Player) && Hero Of(Event Player) == Hero(Mercy));
			Small Message(Event Player, Custom String("{0}", Hero(Mercy)) == Custom String("메르시") ? Custom String("발키리 해제 : 음성 {0}",
				Input Binding String(Button(Melee))) : (Custom String("{0}", Hero(Mercy)) == Custom String("天使") ? Custom String(
				"双击 {0} 取消女武神", Input Binding String(Button(Melee))) : Custom String("Interrupt Valkyrie : Double click {0}",
				Input Binding String(Button(Melee)))));
		End;
		Set Ultimate Charge(Event Player, 100);
	}
}

rule("Hold R, Disable Movement Collision With Environment")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Event Player.finished || Event Player.freeMode) == True;
		Is Button Held(Event Player, Button(Reload)) == True;
	}

	actions
	{
        Abort If(Is True For Any(Remove From Array(Global.buttonsArray, Button(Reload)), Is Button Held(Event Player,
			Current Array Element)));
		Wait(1, Abort When False);
		Event Player.movementCollision = !Event Player.movementCollision;
		If(Event Player.movementCollision);
			Enable Movement Collision With Environment(Event Player);
			Small Message(Event Player, Custom String("no more going thru walls..."));
		Else;
			Disable Movement Collision With Environment(Event Player, False);
			Small Message(Event Player, Custom String("woah u can go thru walls now!!"));
		End;
	}
}

rule("Interact, teleporting players")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		(Event Player.finished || Event Player.freeMode) == True;
		Is Dummy Bot(Player Closest To Reticle(Event Player, All Teams)) == False;
		Is In View Angle(Event Player, Player Closest To Reticle(Event Player, All Teams), 10) == True;
		(!Global.EditMode || Event Player != Host Player) == True;
		Count Of(Global.Checkpoint) > 1;
		Event Player.checkpointA[5] == False;
		(Current Map != Map(Busan) || Distance Between(Event Player, Vector(134, 17, -125)) > 5) == True;
	}

	actions
	{
        Abort If(Is True For Any(Remove From Array(Global.buttonsArray, Button(Interact)), Is Button Held(Event Player,
			Current Array Element)));
		If(Is Button Held(Event Player, Button(Reload)) && !Player Closest To Reticle(Event Player, All Teams).checkpointA[5]);
			Call Subroutine(TempSavePlayerData);
			Event Player.checkpoint = Player Closest To Reticle(Event Player, All Teams).checkpoint;
			Call Subroutine(SkipOrBackCheckpoint);
		Else;
			Teleport(Event Player, Player Closest To Reticle(Event Player, All Teams));
		End;
	}
}

rule("Primary / Secondary Fire, select hero")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.EditMode == False;
		Event Player.finished == True;
		(Is Button Held(Event Player, Button(Primary Fire)) || Is Button Held(Event Player, Button(Secondary Fire))) == True;
	}

	actions
	{
		If(Is Button Held(Event Player, Button(Primary Fire)));
			Event Player.chooseHero += Event Player.chooseHero == Count Of(All Heroes) - 1 ? 1 - Count Of(All Heroes) : 1;
		Else If(Is Button Held(Event Player, Button(Secondary Fire)));
			Event Player.chooseHero -= Event Player.chooseHero == 0 ? 1 - Count Of(All Heroes) : 1;
		End;
		Preload Hero(Event Player, All Heroes[Event Player.chooseHero]);
	}
}

rule("change hero")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.EditMode == False;
		Event Player.finished == True;
		Is Button Held(Event Player, Button(Melee)) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		Is Button Held(Event Player, Button(Ability 2)) == False;
		Hero Of(Event Player) != All Heroes[Event Player.chooseHero];
	}

	actions
	{
		Play Effect(All Players(Team Of(Event Player)), Brigitte Repair Pack Armor Sound, Null, Event Player, 100);
		Wait(0.300, Ignore Condition);
		Abort If(!Event Player.finished);
		Start Forcing Player To Be Hero(Event Player, All Heroes[Event Player.chooseHero]);
		Event Player.playerColor = Event Player.playerTittle ? (Event Player.playerTittle[2] == Color(White) ? Custom Color(Random Integer(
			0, 255), Random Integer(0, 255), Random Integer(0, 255), 255) : Event Player.playerTittle[2]) : Color(White);
	}
}

rule("Crouch+Ablitiy2+Primary/Secondary/Melee, control voice")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.EditMode == False;
		Event Player.finished == True;
		Is Button Held(Event Player, Button(Crouch)) == True;
		Is Button Held(Event Player, Button(Ability 2)) == True;
		(Is Button Held(Event Player, Button(Melee)) || Is Button Held(Event Player, Button(Primary Fire)) || Is Button Held(Event Player,
			Button(Secondary Fire))) == True;
	}

	actions
	{
		If(Is Button Held(Event Player, Button(Primary Fire)) && Event Player.voice < 1.500);
			Event Player.voice += 0.010;
			Wait(0.016, Ignore Condition);
			Wait(0.500, Abort When False);
			While(Is Button Held(Event Player, Button(Primary Fire)) && Event Player.voice < 1.500);
				Event Player.voice += 0.010;
				Wait(0.016, Ignore Condition);
				Wait(0.030, Abort When False);
			End;
		Else If(Is Button Held(Event Player, Button(Secondary Fire)) && Event Player.voice > 0.500);
			Event Player.voice -= 0.010;
			Wait(0.016, Ignore Condition);
			Wait(0.500, Abort When False);
			While(Is Button Held(Event Player, Button(Secondary Fire)) && Event Player.voice > 0.500);
				Event Player.voice -= 0.010;
				Wait(0.016, Ignore Condition);
				Wait(0.030, Abort When False);
			End;
		Else If(Is Button Held(Event Player, Button(Melee)));
			Small Message(Event Player, Custom String("Return the default pitch after pressing for 2 seconds"));
			Wait(2, Abort When False);
			Event Player.voice = 1;
			Small Message(Event Player, Custom String("Default pitch restored"));
		End;
	}
}

rule("Jump+Ablitiy2+Primary/Secondary/Melee, control body size")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.EditMode == False;
		Event Player.finished == True;
		Is Button Held(Event Player, Button(Jump)) == True;
		Is Button Held(Event Player, Button(Ability 2)) == True;
		(Is Button Held(Event Player, Button(Melee)) || Is Button Held(Event Player, Button(Primary Fire)) || Is Button Held(Event Player,
			Button(Secondary Fire))) == True;
	}

	actions
	{
		If(Is Button Held(Event Player, Button(Primary Fire)) && Event Player.bodySize < 7);
			Event Player.bodySize += 0.010;
			Wait(0.016, Ignore Condition);
			Wait(0.500, Abort When False);
			While(Is Button Held(Event Player, Button(Primary Fire)) && Event Player.bodySize < 7);
				Event Player.bodySize += 0.010;
				Wait(0.016, Ignore Condition);
				Wait(0.030, Abort When False);
			End;
		Else If(Is Button Held(Event Player, Button(Secondary Fire)) && Event Player.bodySize > 0.100);
			Event Player.bodySize -= 0.010;
			Wait(0.016, Ignore Condition);
			Wait(0.500, Abort When False);
			While(Is Button Held(Event Player, Button(Secondary Fire)) && Event Player.bodySize > 0.100);
				Event Player.bodySize -= 0.010;
				Wait(0.016, Ignore Condition);
				Wait(0.030, Abort When False);
			End;
		Else If(Is Button Held(Event Player, Button(Melee)));
			Small Message(Event Player, Custom String("Return to the default body size after holding for 2 seconds"));
			Wait(2, Abort When False);
			Event Player.bodySize = 1;
			Small Message(Event Player, Custom String("Default Body size restored"));
		End;
	}
}

rule("Crouch+Ability1+Primary/Secondary/melee, control the trajectory")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.EditMode == False;
		Event Player.finished == True;
		Is Button Held(Event Player, Button(Crouch)) == True;
		Is Button Held(Event Player, Button(Ability 1)) == True;
		(Is Button Held(Event Player, Button(Melee)) || Is Button Held(Event Player, Button(Primary Fire)) || Is Button Held(Event Player,
			Button(Secondary Fire))) == True;
	}

	actions
	{
		If(Is Button Held(Event Player, Button(Primary Fire)) && Event Player.projectile < 500);
			Event Player.projectile += 1;
			Wait(0.016, Ignore Condition);
			Set Projectile Speed(Event Player, Event Player.projectile);
			Set Projectile Gravity(Event Player, Event Player.projectile);
			Wait(0.500, Abort When False);
			While(Is Button Held(Event Player, Button(Crouch)) && Is Button Held(Event Player, Button(Ability 1)) && Is Button Held(
				Event Player, Button(Primary Fire)) && Event Player.projectile < 500);
				Event Player.projectile += 1;
				Wait(0.050, Ignore Condition);
			End;
		Else If(Is Button Held(Event Player, Button(Secondary Fire)) && Event Player.projectile > 0);
			Event Player.projectile -= 1;
			Wait(0.016, Ignore Condition);
			Set Projectile Speed(Event Player, Event Player.projectile);
			Set Projectile Gravity(Event Player, Event Player.projectile);
			Wait(0.500, Abort When False);
			While(Is Button Held(Event Player, Button(Crouch)) && Is Button Held(Event Player, Button(Ability 1)) && Is Button Held(
				Event Player, Button(Secondary Fire)) && Event Player.projectile > 0);
				Event Player.projectile -= 1;
				Wait(0.050, Ignore Condition);
			End;
		Else If(Is Button Held(Event Player, Button(Melee)));
			Small Message(Event Player, Custom String("Return to the default trajectory after holding for 2 seconds"));
			Wait(2, Abort When False);
			Event Player.projectile = 100;
			Small Message(Event Player, Custom String("Default trajectory restored"));
		End;
		Set Projectile Speed(Event Player, Event Player.projectile);
		Set Projectile Gravity(Event Player, Event Player.projectile);
	}
}

rule("Jump+Ability1+Primary/Secondary/Melee, control barrier")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.EditMode == False;
		Event Player.finished == True;
		Is Button Held(Event Player, Button(Jump)) == True;
		Is Button Held(Event Player, Button(Ability 1)) == True;
		(Is Button Held(Event Player, Button(Melee)) || Is Button Held(Event Player, Button(Primary Fire)) || Is Button Held(Event Player,
			Button(Secondary Fire))) == True;
	}

	actions
	{
		If(Is Button Held(Event Player, Button(Primary Fire)) && Event Player.barrierSize < 7);
			Event Player.barrierSize += 0.010;
			Wait(0.016, Ignore Condition);
			Wait(0.500, Abort When False);
			While(Is Button Held(Event Player, Button(Primary Fire)) && Event Player.barrierSize < 7);
				Event Player.barrierSize += 0.010;
				Wait(0.016, Ignore Condition);
				Wait(0.030, Abort When False);
			End;
		Else If(Is Button Held(Event Player, Button(Secondary Fire)) && Event Player.barrierSize > 0.100);
			Event Player.barrierSize -= 0.010;
			Wait(0.016, Ignore Condition);
			Wait(0.500, Abort When False);
			While(Is Button Held(Event Player, Button(Secondary Fire)) && Event Player.barrierSize > 0.100);
				Event Player.barrierSize -= 0.010;
				Wait(0.016, Ignore Condition);
				Wait(0.030, Abort When False);
			End;
		Else If(Is Button Held(Event Player, Button(Melee)));
			Small Message(Event Player, Custom String("Return to the default barrier after holding for 2 seconds"));
			Wait(2, Abort When False);
			Event Player.barrierSize = 1;
			Small Message(Event Player, Custom String("Default barrier restored"));
		End;
	}
}

rule("Fast melee")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.EditMode == False;
		(Event Player.finished || Event Player.freeMode) == True;
		Hero Of(Event Player) != Hero(Reinhardt);
		Hero Of(Event Player) != Hero(Brigitte);
		Is Button Held(Event Player, Button(Melee)) == True;
		Is Button Held(Event Player, Button(Reload)) == False;
		Is Button Held(Event Player, Button(Ability 1)) == False;
		Is Button Held(Event Player, Button(Ability 2)) == False;
	}

	actions
	{
		Wait(0.500, Abort When False);
		Disallow Button(Event Player, Button(Primary Fire));
		Disallow Button(Event Player, Button(Secondary Fire));
		Disallow Button(Event Player, Button(Ability 1));
		Disallow Button(Event Player, Button(Ability 2));
		Disallow Button(Event Player, Button(Ultimate));
		While(Is Button Held(Event Player, Button(Melee)));
			Wait(0.016, Ignore Condition);
			Press Button(Event Player, Button(Melee));
			Wait(0.034, Ignore Condition);
			Cancel Primary Action(Event Player);
			Set Ability Cooldown(Event Player, Button(Melee), 0);
			Wait(0.050, Ignore Condition);
		End;
		Allow Button(Event Player, Button(Primary Fire));
		Allow Button(Event Player, Button(Secondary Fire));
		Allow Button(Event Player, Button(Ability 1));
		Allow Button(Event Player, Button(Ability 2));
		Allow Button(Event Player, Button(Ultimate));
	}
}

rule("cooldown instant reset <fgffb3b3ff>- maylanix, nash n hampsterman ♡</fg>")
{
	event
	{
		Ongoing - Each Player;
		All;
		Mercy;
	}

	conditions
	{
		Ability Cooldown(Event Player, Button(Ability 1)) != 0;
	}

	actions
	{
		If((Event Player.checkpointA[4] == True && Event Player.editMode != 2) || Event Player.freeMode);
			Set Ability Cooldown(Event Player, Button(Ability 1), 0.100);
		Else;
			Wait(0.016, Restart When True);
			Set Ability Cooldown(Event Player, Button(Ability 1), 0);
		End;
	}
}

rule("no kill from checkpoint <fgffb3b3ff>- maylanix ♡</fg>")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}
    
    conditions
    {
        Distance Between(Event Player, Event Player.checkpointA[0]) <= Event Player.checkpointA[1];
        Is Alive(Event Player.enmy) == False;
    }

	actions
	{
        Call Subroutine(TeleportCurrentBot);
	}
}

rule("refresh ga on kill <fgffb3b3ff>- maylanix ♡</fg>")
{
    event
    {
   		Player Earned Elimination;
   		All;
		All;
   	}

    conditions
    {
        Distance Between(Event Player, Event Player.checkpointA[0]) >= Event Player.checkpointA[1];
        Is Alive(Event Player.enmy) == False;
        Event Player.checkpointA[9][1] == True;
		Event Player.checkpointA[4] == False;
	}

	actions
	{
		If(!Is Alive(Event Player.targetBot));
			Small Message(Event Player, Global.Config[33] ? Global.Config[33] : Custom String("   {0} needs to be resurrected to proceed.", Global.allybot));
			Call Subroutine(TeleportToCurrentCheckpoint);
			Abort;
		End;
	    Small Message(Event Player, Custom String("   {1} {0} GA refreshed", Ability Icon String(Hero(Mercy), Button(Ability 1)), Global.Config[31] ? Global.Config[31] : Custom String("nice kill!")));
		Wait Until(!Is Using Ability 1(Event Player), 9999);
		Abort If(Event Player.nearestOrb[1] && Count Of(Event Player.tempCurrentOrb) >= 1);
		Abort If Condition Is False;
	    Set Ability 1 Enabled(Event Player, True);
        If(Event Player.checkpointA[9][2]);
			Abort If Condition Is False;
            Call Subroutine(TeleportBotTokillRefreshPosition);
			If(Event Player.checkpointA[9][3]);
				Kill(Event Player.targetBot, Null);
				Set Ability 2 Enabled(Event Player, True);
			End;
        End;
		Wait Until(Is Using Ability 1(Event Player), 9999);
		Abort If Condition Is False;
		Set Ability 1 Enabled(Event Player, False);
		Event Player.used = True;
	}
}

rule("Subroutine ErrorWarningmsgs")
{
	event
	{
		Subroutine;
		ErrorWarningMsg;
	}

	actions
	{
		If(Count Of(Global.Checkpoint) == 0);
			Small Message(Event Player, Custom String("   There are no checkpoints yet"));
			Play Effect(Event Player, Explosion Sound, Null, Event Player, 100);
			Global.Error = True;
		Else If(Is Button Held(Event Player, Button(Primary Fire)));
			If(Count Of(Event Player.currentSphere) + Count Of(Event Player.currentCloud) + Count Of(Event Player.currentOrb) * 2 + Count Of(
				Filtered Array(Event Player.currentOrb, Current Array Element[1])) * 2 >= Round To Integer((256 - Global.NumberOfUsedEntity)
				/ Number Of Slots(All Teams), Down));
				Small Message(Event Player, Custom String("   The available effects of this level have reached the upper limit"));
				Play Effect(Event Player, Explosion Sound, Null, Event Player, 100);
				Global.Error = True;
			Else If(Is Button Held(Event Player, Button(Melee)) && Event Player.editMode == 2 && Count Of(Event Player.currentOrb) == 0);
				Small Message(Event Player, Custom String("   There is no orb yet"));
				Play Effect(Event Player, Explosion Sound, Null, Event Player, 100);
				Global.Error = True;
			End;
		Else If(Is Button Held(Event Player, Button(Secondary Fire)));
			If(Event Player.editMode == 2 && Count Of(Event Player.currentOrb) == 0);
				Small Message(Event Player, Custom String("   There is no orb yet"));
				Play Effect(Event Player, Explosion Sound, Null, Event Player, 100);
				Global.Error = True;
			Else If(Event Player.editMode == 3 && Count Of(Event Player.currentSphere) == 0);
				Small Message(Event Player, Custom String("   There is no sphere yet"));
				Play Effect(Event Player, Explosion Sound, Null, Event Player, 100);
				Global.Error = True;
			Else If(Event Player.editMode == 4 && Count Of(Event Player.currentCloud) == 0);
				Small Message(Event Player, Custom String("   There is no cloud yet"));
				Play Effect(Event Player, Explosion Sound, Null, Event Player, 100);
				Global.Error = True;
			End;
		Else If(Is Button Held(Event Player, Button(Reload)));
			If(Event Player.editMode == 1 && !Event Player.checkpointA[3][0] && (Weapon(Event Player) == 1));
				Small Message(Event Player, Custom String("   Target ally not created in current level"));
				Play Effect(Event Player, Explosion Sound, Null, Event Player, 100);
				Global.Error = True;
            Else If(Event Player.editMode == 1 && Event Player.checkpointA[9][2] && (Weapon(Event Player) == 2));
				Small Message(Event Player, Custom String("   Cannot disable refresh -- delete refresh bot first"));
				Play Effect(Event Player, Explosion Sound, Null, Event Player, 100);
				Global.Error = True;
			Else If(Event Player.editMode == 2 && !Event Player.currentOrb[Global.CurrentChooseOrb][1]);
				Small Message(Event Player, Custom String("   Target ally not created in current orb"));
				Play Effect(Event Player, Explosion Sound, Null, Event Player, 100);
				Global.Error = True;
			Else If(Event Player.editMode == 7 && (!Event Player.checkpointA[3][1] || !Event Player.checkpointA[3][0]));
				Small Message(Event Player, !Event Player.checkpointA[3][0] ? Custom String("   Target ally not created in current level") : 
					Custom String("   The current level's target ally is not set to be resurrected"));
				Play Effect(Event Player, Explosion Sound, Null, Event Player, 100);
				Global.Error = True;
			End;
		Else If(Is Button Held(Event Player, Button(Ability 1)));
			If(Event Player.editMode == 1 && !Event Player.checkpointA[3][1] && (Weapon(Event Player) == 1));
				Small Message(Event Player, Custom String("   The current level's target ally is not set to be resurrected"));
				Play Effect(Event Player, Explosion Sound, Null, Event Player, 100);
				Global.Error = True;
            Else If((Event Player.editMode == 1 || Event Player.editMode == 6) && !Event Player.checkpointA[9][0] && (Weapon(Event Player) == 2));
				Small Message(Event Player, Custom String("   Enemy not created in current level"));
				Play Effect(Event Player, Explosion Sound, Null, Event Player, 100);
				Global.Error = True;
			Else If(Event Player.editMode == 2 && !Event Player.currentOrb[Global.CurrentChooseOrb][2]);
				Small Message(Event Player, Custom String("   The current orb's target ally is not set to be resurrected"));
				Play Effect(Event Player, Explosion Sound, Null, Event Player, 100);
				Global.Error = True;
			End;
        Else If(Is Button Held(Event Player, Button(Ability 2)) && Is Button Held(Event Player, Button(Melee)));
            If((Event Player.editMode == 1 || Event Player.editMode == 6) && !Event Player.checkpointA[9][0] && (Weapon(Event Player) == 1));
                Small Message(Event Player, Custom String("   Cannot add bot -- add enemy bot first"));
                Play Effect(Event Player, Explosion Sound, Null, Event Player, 100);
			    Global.Error = True;
            Else If((Event Player.editMode == 1 || Event Player.editMode == 6) && !Event Player.checkpointA[9][1] && (Weapon(Event Player) == 2));
                Small Message(Event Player, Custom String("   Nothing to delete"));
                Play Effect(Event Player, Explosion Sound, Null, Event Player, 100);
			    Global.Error = True;
            End;
		End;
	}
}

rule("Subroutine  CreateNewEffect")
{
	event
	{
		Subroutine;
		CreateNewEffect;
	}

	actions
	{
		If(Event Player.editMode == 2);
			Destroy Icon(Event Player.botIcons[Global.CurrentChooseOrb]);
			Modify Player Variable(Event Player, botIcons, Remove From Array By Index, Global.CurrentChooseOrb);
			Destroy Effect(Event Player.botEffects[Global.CurrentChooseOrb]);
			Modify Player Variable(Event Player, botEffects, Remove From Array By Index, Global.CurrentChooseOrb);
			Destroy Icon(Event Player.orbIcons[Global.CurrentChooseOrb]);
			Destroy Effect(Event Player.orbEffects[Global.CurrentChooseOrb]);
			If(Event Player.currentOrb[Global.CurrentChooseOrb][1]);
				Create Icon(Is True For Any(Event Player.tempCurrentOrb, Current Array Element[0] == Evaluate Once(
					Event Player.currentOrb[Global.CurrentChooseOrb][0])) || Event Player.finished || Event Player.freeMode ? Event Player : Null,
					Event Player.currentOrb[Global.CurrentChooseOrb][1] + Vector(0, 2, 0), Heart, Visible To,
					Event Player.checkpointA[2] ? Global.Config[1][0] : Global.Config[1][1], True);
				Event Player.botIcons[Global.CurrentChooseOrb] = Last Created Entity;
				Create Effect(Is True For Any(Event Player.tempCurrentOrb, Current Array Element[0] == Evaluate Once(
					Event Player.currentOrb[Global.CurrentChooseOrb][0])) || Event Player.finished || Event Player.freeMode ? Event Player : Null,
					Good Aura, Event Player.currentOrb[Global.CurrentChooseOrb][2] ? Global.Config[48] : Global.Config[46],
					Event Player.currentOrb[Global.CurrentChooseOrb][1] + Vector(0, 0.800, 0), 1, Visible To);
				Event Player.botEffects[Global.CurrentChooseOrb] = Last Created Entity;
				Create Icon(Is True For Any(Event Player.tempCurrentOrb, Current Array Element[0] == Evaluate Once(
					Event Player.currentOrb[Global.CurrentChooseOrb][0])) || Event Player.finished || Event Player.freeMode ? Event Player : Null,
					Event Player.currentOrb[Global.CurrentChooseOrb][0] + Vector(0, 0.500, 0), Recycle, Visible To,
					Event Player.currentOrb[Global.CurrentChooseOrb][2] ? Global.Config[47] : Global.Config[45], True);
			Else;
				Create Icon(Is True For Any(Event Player.tempCurrentOrb, Current Array Element[0] == Evaluate Once(
					Event Player.currentOrb[Global.CurrentChooseOrb][0])) || Event Player.finished || Event Player.freeMode ? Event Player : Null,
					Event Player.currentOrb[Global.CurrentChooseOrb][0] + Vector(0, 0.500, 0), Radioactive, Visible To, Global.Config[43],
					True);
			End;
			Event Player.orbIcons[Global.CurrentChooseOrb] = Last Created Entity;
			If(Global.defaultorb == 1);
				Create Effect(Is True For Any(Event Player.tempCurrentOrb, Current Array Element[0] == Evaluate Once(
					Event Player.currentOrb[Global.CurrentChooseOrb][0])) || Event Player.finished || Event Player.freeMode ? Event Player : Null,
					Sphere, Event Player.currentOrb[Global.CurrentChooseOrb][1] ? Global.Config[44] : Global.Config[42],
					Event Player.currentOrb[Global.CurrentChooseOrb][0], 0.5, Visible To);
			Else;
				Create Effect(Is True For Any(Event Player.tempCurrentOrb, Current Array Element[0] == Evaluate Once(
					Event Player.currentOrb[Global.CurrentChooseOrb][0])) || Event Player.finished || Event Player.freeMode ? Event Player : Null,
					Orb, Event Player.currentOrb[Global.CurrentChooseOrb][1] ? Global.Config[44] : Global.Config[42],
					Event Player.currentOrb[Global.CurrentChooseOrb][0], 1, Visible To);
			End;
			Event Player.orbEffects[Global.CurrentChooseOrb] = Last Created Entity;
		Else If(Event Player.editMode == 3);
			Destroy Effect(Event Player.sphereEffects[Global.CurrentChooseSphere]);
			Create Effect(Event Player, Sphere, Global.Config[40], Event Player.currentSphere[Global.CurrentChooseSphere][0],
				Event Player.currentSphere[Global.CurrentChooseSphere][1], None);
			Event Player.sphereEffects[Global.CurrentChooseSphere] = Last Created Entity;
		Else If(Event Player.editMode == 4);
			Destroy Effect(Event Player.cloudEffects[Global.CurrentChooseCloud]);
			Create Effect(Event Player, Cloud, Global.Config[41], Event Player.currentCloud[Global.CurrentChooseCloud][0], 1, None);
			Event Player.cloudEffects[Global.CurrentChooseCloud] = Last Created Entity;
		End;
	}
}

rule("Subroutine  EditChoosedEffect")
{
	event
	{
		Subroutine;
		EditChoosedEffect;
	}

	actions
	{
		If(Event Player.editMode == 2);
			Destroy Icon(Event Player.orbIcons[Global.CurrentChooseOrb]);
			Destroy Effect(Event Player.orbEffects[Global.CurrentChooseOrb]);
			If(Event Player.currentOrb[Global.CurrentChooseOrb][1]);
				Create Icon(Is True For Any(Event Player.tempCurrentOrb, Current Array Element[0] == Evaluate Once(
					Event Player.currentOrb[Global.CurrentChooseOrb][0])) || Event Player.finished || Event Player.freeMode ? Event Player : Null,
					Global.ChooseOrbPosition + Vector(0, 0.500, 0), Recycle, Visible To and Position,
					Event Player.checkpointA[2] ? Global.Config[1][0] : Global.Config[1][1], True);
			Else;
				Create Icon(Is True For Any(Event Player.tempCurrentOrb, Current Array Element[0] == Evaluate Once(
					Event Player.currentOrb[Global.CurrentChooseOrb][0])) || Event Player.finished || Event Player.freeMode ? Event Player : Null,
					Global.ChooseOrbPosition + Vector(0, 0.500, 0), Radioactive, Visible To and Position, Global.Config[43], True);
			End;
			Event Player.orbIcons[Global.CurrentChooseOrb] = Last Created Entity;
			If(Global.defaultorb == 1);
				Create Effect(Is True For Any(Event Player.tempCurrentOrb, Current Array Element[0] == Evaluate Once(
					Event Player.currentOrb[Global.CurrentChooseOrb][0])) || Event Player.finished || Event Player.freeMode ? Event Player : Null,
					Sphere, Event Player.currentOrb[Global.CurrentChooseOrb][1] ? Global.Config[44] : Global.Config[42], Global.ChooseOrbPosition, 0.5,
					Visible To Position and Radius);
			Else;
				Create Effect(Is True For Any(Event Player.tempCurrentOrb, Current Array Element[0] == Evaluate Once(
					Event Player.currentOrb[Global.CurrentChooseOrb][0])) || Event Player.finished || Event Player.freeMode ? Event Player : Null,
					Orb, Event Player.currentOrb[Global.CurrentChooseOrb][1] ? Global.Config[44] : Global.Config[42], Global.ChooseOrbPosition, 1,
					Visible To Position and Radius);
			End;
			Event Player.orbEffects[Global.CurrentChooseOrb] = Last Created Entity;
		Else If(Event Player.editMode == 3);
			Destroy Effect(Event Player.sphereEffects[Global.CurrentChooseSphere]);
			Create Effect(Event Player, Sphere, Global.Config[40], Global.ChooseSpherePosition,
				Event Player.currentSphere[Global.CurrentChooseSphere][1], Position and Radius);
			Event Player.sphereEffects[Global.CurrentChooseSphere] = Last Created Entity;
		Else If(Event Player.editMode == 4);
			Destroy Effect(Event Player.cloudEffects[Global.CurrentChooseCloud]);
			Create Effect(Event Player, Cloud, Global.Config[41], Global.ChooseCloudPosition, 1, Position and Radius);
			Event Player.cloudEffects[Global.CurrentChooseCloud] = Last Created Entity;
		End;
	}
}

rule("Subroutine KillOrResurrectBot")
{
	event
	{
		Subroutine;
		KillOrResurrectBot;
	}

	actions
	{
		If(Event Player.editMode == 2);
			Event Player.nearestOrb = Event Player.currentOrb[Global.CurrentChooseOrb];
			If(Event Player.nearestOrb[2]);
				Kill(Event Player.targetBot, Null);
			Else;
				Resurrect(Event Player.targetBot);
			End;
			Call Subroutine(TeleportBotToRefreshPosition);
		Else;
			If((Event Player.aura && Event Player.checkpointA[3][1]) || (!Event Player.aura && Event Player.checkpointA[9][3]));
				Kill(Event Player.targetBot, Null);
			Else;
				Resurrect(Event Player.targetBot);
			End;
			If(Event Player.editMode != 6);
				Call Subroutine(TeleportCurrentBot);
			End;
		End;
	}
}

rule("Subroutine  TeleportBotToRefreshPosition")
{
	event
	{
		Subroutine;
		TeleportBotToRefreshPosition;
	}

	actions
	{
        Teleport(Event Player.targetBot, Event Player.nearestOrb[1] ? Event Player.nearestOrb[1] : Nearest Walkable Position(Vector(-500,
			-500, -500)));
		Kill(Event Player.nearestOrb[2] ? Event Player.targetBot : Null, Null);
	}
}

rule("Subroutine  TeleportBotTokillRefreshPosition")
{
	event
	{
		Subroutine;
		TeleportBotTokillRefreshPosition;
	}

	actions
	{
		Teleport(Event Player.targetBot, Event Player.checkpointA[9][2] ? Event Player.checkpointA[9][2] : Nearest Walkable Position(Vector(-500,
			    -500, -500)));
		If(Event Player.checkpoint[9][3]);
			Kill(Event Player.targetBot, Null);
		End;
		Event Player.aura = False;
	}
}

rule("Subroutine ClearRedundantData")
{
	event
	{
		Subroutine;
		ClearRedundantData;
	}

	actions
	{
		Global.EditMode = Null;
		Global.Debug = Null;
		Global.Error = Null;
		Global.ChooseOrbPosition = Null;
		Global.rezrefresh = Null;
		Global.ChooseSpherePosition = Null;
		Global.allybot = Null;
		Global.allyname = Null;
		Global.ChooseCloudPosition = Null;
		Global.TipHudSpaceHolder = Null;
		Global.Vips = Null;
		Global.PlayersRecord = Null;
		Global.buttonsArray = Null;
		Global.PlayersData = Null;
		Global.BigMsgs = Null;
		Global.rezonpoint = Null;
		Global.bkey = Null;
		Global.rkey = Null;
		Global.Tips = Null;
		Global.WorldTexts = Null;
		Global.SmallMsgs = Null;
		Global.BotGravity = Null;
		Global.CurrentChooseOrb = Null;
		Global.CurrentChooseSphere = Null;
		Global.CurrentChooseCloud = Null;
		Global.NewCheckpointDefaultCtrl = Null;
		Global.NewCheckpointDefaultRadius = Null;
        Global.enmybot = Null;
        Global.enmyrfdefault = Null;
        Global.enmyname = Null;
        Global.gamer = Null;
		Global.NewCheckpointDefaultMaxRefresh = Null;
		Global.Config = Null;
		Global.NumberOfUsedEntity = Null;
		Global.TempArray = Null;
		Global.I = Null;
		Global.II = Null;
		Global.OnGround = Null;
		Global.Once = Null;
		Global.CreatorAndCode = Null;
		Global.Top5 = Null;
		Global.Top5Color = Null;
		Global.ShowHotKeyPlayers = Null;
		Global.PreviewPosition = Null;
		Global.TempVar = Null;
		Global.CheckpointBPosition = Null;
		Global.FillSpace = Null;
	}
}

rule("Subroutine  InitializeGlobalVariables")
{
	event
	{
		Subroutine;
		InitializeGlobalVariables;
	}

	actions
	{
		Global.allybot = Workshop Setting Hero(Custom String("◐ Ally setup"), Custom String("Target Ally Bot"), Mercy, 0);
		Global.allyname = Workshop Setting Combo(Custom String("◐ Ally setup"), Custom String("Ally Bot Name (top of their head)"), 0, Array(
	    	Custom String("hero name"), Custom String("ally"), Custom String("target"), Custom String("custom (workshop settings [setup])")), 1);
		"select default refresh on rez"
    	Global.rezrefresh = Workshop Setting Toggle(Custom String("◐ Ally setup"), Custom String("Default refresh GA after rez"), False, 2);
        Global.enmybot = Workshop Setting Hero(Custom String("◐ Enemy setup"), Custom String("Enemy Bot"), Widowmaker, 0);
        Global.enmyname = Workshop Setting Combo(Custom String("◐ Enemy setup"), Custom String("Enemy Bot Name (top of their head)"), 0, Array(
		    Custom String("target"), Custom String("enemy"), Custom String("hero name"), Custom String("custom (workshop settings [setup])")), 1);
		Global.enmyrfdefault = Workshop Setting Toggle(Custom String("◐ Enemy setup"), Custom String("Default refresh GA after kill"), False, 2);
		"reach checkpoint while rezzing"
    	Global.rezonpoint = Workshop Setting Toggle(Custom String("◐ Extra game settings"), Custom String("Allow resurrect on goal checkpoint"), False, 1);
		"default orb look"
		Global.defaultorb = Workshop Setting Combo(Custom String("◐ Extra game settings"), Custom String("Orb style"), 0, Array(Custom String("orb"), Custom String("sphere")), 2);
		Global.bkey = Workshop Setting Combo(Custom String("◐ Keybinds"), Custom String("Reset keybinds"), 0, Array(
	    	Custom String("Taw, Giga [Reload]"), Custom String("Peace [Ultimate]")), 0);
		Global.rkey = Workshop Setting Combo(Custom String("◐ Keybinds"), Custom String("Restart keybinds"), 0, Array(
	    	Custom String("Taw [Ultimate + Interact]"), Custom String("Peace, Giga [Crouch + Interact + Rez]")), 1);
		Global.EditMode = Workshop Setting Toggle(Custom String("‣ Edit mode"), Custom String("Edit Mode(편집 모드)"), True, 0);
		Global.NewCheckpointDefaultRadius = Workshop Setting Real(Custom String("◑ Game Settings"), Custom String(
			"New level radius(새 관문 반경)"), 1.600, 1, 5, 0);
		Global.NewCheckpointDefaultCtrl = Workshop Setting Toggle(Custom String("◑ Game Settings"), Custom String(
			"New level crouch(새 관문 앉기)"), True, 1);
		Global.NewCheckpointDefaultMaxRefresh = Workshop Setting Toggle(Custom String("◑ Game Settings"), Custom String(
			"New level Ga infinite times(새 관문 수호천사를 무제한)"), False, 2);
		Global.OnGround = Workshop Setting Toggle(Custom String("◑ Game Settings"), Custom String("Land on arrival point(도착은 착지가 필요하다)"),
			False, 4);
		Global.Debug = Workshop Setting Toggle(Custom String("◑ Game Settings"), Custom String("Debug"), False, 5);
		Global.Checkpoint = Global.Checkpoint ? Global.Checkpoint : Empty Array;
		Global.PreviewPosition = Empty Array;
		Global.TempVar[11] = Null;
		Global.Once = True;
		Global.NumberOfUsedEntity = Number Of Slots(All Teams) * 5 + 25 + 6 + 1 + 6 + 1;
		Global.ShowHotKeyPlayers = Empty Array;
		Global.PlayersRecord = Empty Array;
		Global.PlayersData = Empty Array;
		Global.Top5 = Empty Array;
		Global.Vips = Array(Array(Custom String("Peace"), Custom String("{0} Peace", Ability Icon String(Hero(Mercy), Button(Ability 2))),
			Color(White)), Array(Custom String("冰丶柠檬"), Custom String("{0} IceLemon", Ability Icon String(Hero(Ana), Button(Ability 1))),
			Color(White)), Array(Custom String("Sera"), Custom String(""), Color(White)), Array(Custom String("풋사과의그린애플"), Custom String(
			""), Color(Green)), Array(Custom String("kroissant"), Custom String(""), Color(Sky Blue)), Array(Custom String("KARMAis9GOD"),
			Custom String("{0} BunnyJump", Ability Icon String(Hero(D.Va), Button(Ultimate))), Color(White)), Array(Custom String("Exit"),
			Custom String("{0} Exit", Ability Icon String(Hero(Kiriko), Button(Ability 2))), Color(White)), Array(Custom String("maylanix"), 
			Custom String("maylanix {0}", Icon String(Skull)), Custom Color(255, 153, 187, 255)), Array(Custom String("EggsBenna"), Custom String("egg {0}", Ability Icon String(Hero(
			Ashe), Button(Ultimate))), Custom Color(255, 153, 187, 255)), Array(Custom String("localmvthman"), Custom String("localmvthman {0}", Ability Icon String(Hero(
			Illari), Button(Ultimate))), Custom Color(253, 249, 80, 255)), Array(Custom String("OnMyKnees"), Custom String("onmyknees {0}", Ability Icon String(Hero(
			Hanzo), Button(Ultimate))), Custom Color(255, 153, 187, 255)), Array(Custom String("clementine"), Custom String("clementine {0}", Ability Icon String(Hero(
			Mercy), Button(Ability 1))), Custom Color(255, 153, 102, 255)), Array(Custom String("GigaMercy"), Custom String("gigamercy {0}", Ability Icon String(Hero(
			Mercy), Button(Ability 1))), Custom Color(251, 134, 28, 255)), Array(Custom String("tealover"), Custom String("tealover ♡"), Custom Color(255, 153, 204, 255)), 
			Array(Custom String("Femb0yMak3r"), Custom String("femboymaker {0}", Ability Icon String(Hero(Lifeweaver), Button(Primary Fire))), Custom Color(144, 247, 254, 255)), 
			Array(Custom String("avafmwah"), Custom String("avafmwah {0}", Ability Icon String(Hero(Brigitte), Button(Ultimate))), Custom Color(144, 247, 254, 255)), 
			Array(Custom String("cashhole"), Custom String("cashhole {0}", Ability Icon String(Hero(Kiriko), Button(Ability 2))), Custom Color(218, 138, 255, 255)), 
			Array(Custom String("Ravenish"), Custom String("ravenish {0}", Ability Icon String(Hero(Sombra), Button(Ultimate))), Color(Purple)), 
			Array(Custom String("klarkasaurus"), Custom String("klarkasaurus {0}", Ability Icon String(Hero(Mercy), Button(Ability 1))), Color(White)), 
			Array(Custom String("CowboyBoon"), Custom String("cowboyboon {0}", Ability Icon String(Hero(Lúcio), Button(Ultimate))), Color(Green)), 
			Array(Custom String("GingerFrog"), Custom String("gingerfrog {0}", Ability Icon String(Hero(Lifeweaver), Button(Primary Fire))), Color(Green)), 
			Array(Custom String("xPrisonxMike"), Custom String("xprisonxmike {0}", Ability Icon String(Hero(Mercy), Button(Ability 2))), Color(Green)), 
			Array(Custom String("Murriner"), Custom String("murriner {0}", Ability Icon String(Hero(Lifeweaver), Button(Primary Fire))), Custom Color(185, 101, 240, 255)), 
			Array(Custom String("mooshworm"), Custom String("mooshworm {0}", Ability Icon String(Hero(D.Va),Button(Ultimate))), Custom Color(98, 198, 115, 255)));
		Global.FillSpace = Array(Custom String("       "), Custom String("     "), Custom String("   "), Custom String(" "));
		Global.TipHudSpaceHolder = Custom String("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
        Global.buttonsArray = Array(Button(Primary Fire), Button(Secondary Fire), Button(Ultimate), Button(Interact), Button(Reload),
			Button(Melee), Button(Jump), Button(Crouch), Button(Ability 1), Button(Ability 2));
	}
}

rule("Subroutine  InitializePlayerVariables")
{
	event
	{
		Subroutine;
		InitializePlayerVariables;
	}

	actions
	{
		Event Player.checkpoint = 0;
		Event Player.freeMode = False;
		Event Player.spectatorMode = False;
		Event Player.cheat = False;
		Event Player.leaveOriginalCheckpoint = False;
		Event Player.time = 0;
		Event Player.mistake = 0;
		Event Player.bodySize = 1;
		If(!Event Player.movementCollision);
			Enable Movement Collision With Environment(Event Player);
			Event Player.movementCollision = True;
		End;
		If(!Event Player.playerNickname);
			Event Player.editMode = Global.EditMode ? 1 : 0;
			Event Player.bestRecord = First Of(Filtered Array(Global.PlayersRecord, Current Array Element[0] == Custom String("{0}",
				Event Player)))[1];
			Event Player.chooseHero = 0;
			Event Player.voice = 1;
			Event Player.barrierSize = 1;
			Event Player.projectile = 100;
			Event Player.currentOrb = Empty Array;
			Event Player.currentSphere = Empty Array;
			Event Player.currentCloud = Empty Array;
			Event Player.playerTittle = First Of(Filtered Array(Global.Vips, Current Array Element[0] == Custom String("{0}", Event Player)));
			Event Player.playerNickname = Event Player.playerTittle ? (
				Event Player.playerTittle[1] ? Event Player.playerTittle[1] : Custom String("{0}", Event Player)) : Custom String("{0}",
				Event Player);
			Event Player.playerColor = Event Player.playerTittle ? (Event Player.playerTittle[2] == Color(White) ? Custom Color(Random Integer(
				0, 255), Random Integer(0, 255), Random Integer(0, 255), 255) : Event Player.playerTittle[2]) : Color(White);
			If(Global.EditMode && !Array Contains(Global.ShowHotKeyPlayers, Event Player));
				Modify Global Variable(ShowHotKeyPlayers, Append To Array, Event Player);
			End;
		End;
	}
}

rule("Subroutine CreatePlayerTargetBot")
{
	event
	{
		Subroutine;
		CreatePlayerTargetBot;
	}

	actions
	{
		If(!Entity Exists(Event Player.targetBot));
			Create Dummy Bot(Global.allybot, Team Of(Event Player), Slot Of(Event Player) + Number Of Slots(All Teams),
				Global.Checkpoint[Event Player.checkpoint][3][0] ? Global.Checkpoint[Event Player.checkpoint][3][0] : Nearest Walkable Position(
				Vector(-500, -500, -500)), Null);
			Event Player.targetBot = Last Created Entity;
			Wait(0.016, Ignore Condition);
			Start Forcing Dummy Bot Name(Event Player.targetBot, Custom String("{0}'s {1}", Event Player, Global.Config[11] ? Global.Config[11] : (Global.allyname == 0 ? 
				Global.allybot : (Global.allyname == 1 ? Custom String("ally") : (Global.allyname == 2 ? Custom String("target") : Custom String("[CONFIGURATION ERROR]"))))));
			Wait(0.016, Ignore Condition);
			Start Facing(Event Player.targetBot, Direction Towards(Update Every Frame(Eye Position(Event Player.targetBot)),
				Update Every Frame(Eye Position(Event Player))), 9999, To World, Direction and Turn Rate);
		End;
	}
}

rule("Subroutine CreatePlayerEnemyBot")
{
	event
	{
		Subroutine;
		CreatePlayerEnemyBot;
	}

	actions
	{
        If(!Entity Exists(Event Player.enmy));
            Create Dummy Bot(Global.enmybot, Opposite Team Of(Team Of(Event Player)), Slot Of(Event Player) + Number Of Slots(All Teams),
				Global.Checkpoint[Event Player.checkpoint][9][0] ? Global.Checkpoint[Event Player.checkpoint][9][0] : Nearest Walkable Position(
				Vector(-500, -500, -500)), Null);
            Event Player.enmy = Last Created Entity;
            Event Player.enmy.enemy = Event Player;
            Wait(0.016, Ignore Condition);
            Start Forcing Dummy Bot Name(Event Player.enmy, Custom String("{0}'s {1}", Event Player, Global.Config[50] ? Global.Config[50] : (Global.enmyname == 2 ? 
			Global.enmybot : (Global.enmyname == 1 ? Custom String("enemy") : (Global.enmyname == 0 ? Custom String("target") : Custom String("[CONFIGURATION ERROR]"))))));
            Wait(0.016, Ignore Condition);
			Set Healing Received(Event Player.enmy, 0);
            Disable Built-In Game Mode Respawning(Event Player.enmy);
			Disable Movement Collision With Players(Event Player.enmy);
			"causes crashes - disabled"
			disabled Wait(2, Ignore Condition);
			disabled If(Global.BotGravity);
				disabled Wait(0.016, Ignore Condition);
				disabled Set Gravity(Event Player.enmy, 0);
			disabled End;
			Wait(0.016, Ignore Condition);
            "remove if laggy"
			Start Facing(Event Player.enmy, Direction Towards(Update Every Frame(Eye Position(Event Player.enmy)),
				Update Every Frame(Eye Position(Event Player))), 9999, To World, Direction and Turn Rate);
        End;
	}
}

rule("Subroutine CreateGlobalHUD")
{
	event
	{
		Subroutine;
		CreateGlobalHUD;
	}

	actions
	{
		"运行时间"
		If(Current Game Mode == Game Mode(Skirmish));
			Set Objective Description(All Players(All Teams), Custom String("{0}", Hero(Mercy)) == Custom String("메르시") ? Custom String(
				"시간: {0} 분 {1} 초 경과", Round To Integer(Total Time Elapsed / 60, Down), Round To Integer(Total Time Elapsed % 60, Down)) : (
				Custom String("{0}", Hero(Mercy)) == Custom String("天使") ? Custom String("本局游戏已运行 {0} 分 {1} 秒", Round To Integer(
				Total Time Elapsed / 60, Down), Round To Integer(Total Time Elapsed % 60, Down)) : Custom String(
				"Elapsed time {0} minutes {1} seconds", Round To Integer(Total Time Elapsed / 60, Down), Round To Integer(
				Total Time Elapsed % 60, Down))), Visible To and String);
		Else;
			Create HUD Text(All Players(All Teams), Null, Custom String("{0}", Hero(Mercy)) == Custom String("메르시") ? Custom String(
				"시간: {0} 분 {1} 초 경과", Round To Integer(Total Time Elapsed / 60, Down), Round To Integer(Total Time Elapsed % 60, Down)) : (
				Custom String("{0}", Hero(Mercy)) == Custom String("天使") ? Custom String("本局游戏已运行 {0} 分 {1} 秒", Round To Integer(
				Total Time Elapsed / 60, Down), Round To Integer(Total Time Elapsed % 60, Down)) : Custom String(
				"Elapsed time {0} minutes {1} seconds", Round To Integer(Total Time Elapsed / 60, Down), Round To Integer(
				Total Time Elapsed % 60, Down))), Null, Top, 0, Null, Color(White), Null, Visible To and String, Default Visibility);
		End;
		Create Effect(Local Player.bhop ? Local Player : Null, Ana Nano Boosted Effect, Null, Local Player, 1,
			Visible To Position and Radius);
		Create HUD Text(All Players(All Teams), Null, Custom String("{0}", Hero(Mercy)) == Custom String("메르시") ? Custom String(
			"제작자: {0}\n코드: {1}", Global.CreatorAndCode[0] ? Global.CreatorAndCode[0] : Custom String("익명"),
			Global.CreatorAndCode[1] ? Global.CreatorAndCode[1] : Custom String("아직")) : (Custom String("{0}", Hero(Mercy))
			== Custom String("天使") ? Custom String("作者: {0}\n代码: {1}", Global.CreatorAndCode[0] ? Global.CreatorAndCode[0] : Custom String(
			"佚名"), Global.CreatorAndCode[1] ? Global.CreatorAndCode[1] : Custom String("暂无")) : Custom String(
			"{0} Mercy Parkour by {1}\nCode: {2}", Current Map, Global.CreatorAndCode[0] ? Global.CreatorAndCode[0] : Global.EditMode ? Custom String("{0} — don't forget to set creator + code", Host Player) : Custom String(
			"Anonymous"), Custom String("{0}{1}{2}", Global.CreatorAndCode[1] ? Global.CreatorAndCode[1] : Custom String("???"), Global.CreatorAndCode[2] ? Custom String("\ndifficulty: {0}", Global.CreatorAndCode[2]) : Custom String(""), 
			Global.CreatorAndCode[3] ? Custom String("\n{0}", Global.CreatorAndCode[3]) : Custom String("")))), Custom String(
			"－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－"), Left, -998, Null, Global.Config[12], Null, Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Custom String(" "), Null, Right, 2, Null, Null, Null, Visible To,
			Default Visibility);
		Create HUD Text(Filtered Array(All Players(All Teams), !Global.EditMode && !Current Array Element.finished), Null, Custom String(
			" \n \n "), Custom String(" "), Right, 3, Null, Null, Null, Visible To, Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Custom String("{0}", Hero(Mercy)) == Custom String("메르시") ? Custom String(
			"{0} ({1}) 두 번 눌러 단축키 (비)활성화", Ability Icon String(Hero(Torbjörn), Button(Ability 2)), Input Binding String(Button(Interact)))
			: (Custom String("{0}", Hero(Mercy)) == Custom String("天使") ? Custom String("{0} 双击互动键（{1}）查看快捷键列表", Ability Icon String(Hero(
			Torbjörn), Button(Ability 2)), Input Binding String(Button(Interact))) : Custom String(
			"{0} Double click ({1}) Show or hide controls", Ability Icon String(Hero(Torbjörn), Button(Ability 2)), Input Binding String(
			Button(Interact)))), Null, Right, 98, Null, Custom Color(209, 179, 255, 200), Null, Visible To and String, Default Visibility);
		Create HUD Text(Global.ShowHotKeyPlayers, Null, Custom String("{0}\n{1}",
			Custom String("{0}", Hero(Mercy)) == Custom String("메르시") ? Custom String("다음 레벨 보기 : {0} + {1}\n{2}", Input Binding String(
			Button(Primary Fire)), Input Binding String(Button(Secondary Fire)), Custom String("빠른 리젠 : {0}\n{1}", Input Binding String(
			Button(Ultimate)), Custom String("프리 모드 : {0} + {1}\n{2}", Input Binding String(Button(Reload)), Input Binding String(Button(
			Melee)), Custom String("3인칭 모드 : {0} + {1}\n{2}", Input Binding String(Button(Ability 2)), Input Binding String(Button(Jump)),
			Custom String("관전 모드 : {0} + {1}{2}", Input Binding String(Button(Ultimate)), Input Binding String(Button(Ability 2)),
			Global.EditMode && Local Player == Host Player ? Custom String("") : Custom String("\n초기화 : {0} + {1} + {2}",
			Input Binding String(Button(Crouch)), Input Binding String(Button(Ability 2)), Input Binding String(Button(Interact)))))))) : (
			Custom String("{0}", Hero(Mercy)) == Custom String("天使") ? Custom String("　预览下关点位 | {0} + {1}\n{2}", Input Binding String(
			Button(Primary Fire)), Input Binding String(Button(Secondary Fire)), Custom String("　　　快速回点 | {0}\n{1}", Input Binding String(
			Button(Ultimate)), Custom String("　　　自由行动 | {0} + {1}\n{2}", Input Binding String(Button(Reload)), Input Binding String(Button(
			Melee)), Custom String("　切换第三人称 | {0} + {1}\n{2}", Input Binding String(Button(Ability 2)), Input Binding String(Button(Jump)),
			Custom String("　　　死亡观战 | {0} + {1}{2}", Input Binding String(Button(Ultimate)), Input Binding String(Button(Ability 2)),
			Global.EditMode && Local Player == Host Player ? Custom String("") : Custom String("\n　　　重新开始 | {0} + {1} + {2}",
			Input Binding String(Button(Crouch)), Input Binding String(Button(Ability 2)), Input Binding String(Button(Interact))))))))
			: Custom String("Preview next point : {0} + {1}\n{2}", Input Binding String(Button(Primary Fire)), Input Binding String(Button(
			Secondary Fire)), Custom String("Back to point : {0}\n{1}", Global.bkey == 0 ? Input Binding String(Button(Reload)) : Input Binding String(Button(Ultimate)), Custom String(
			"Free Mode : {0} + {1}\n{2}", Input Binding String(Button(Reload)), Input Binding String(Button(Melee)), Custom String(
			"3rd Person : {0} + {1}\n{2}", Input Binding String(Button(Reload)), Input Binding String(Button(Ability 2)), Custom String(
			"Spectator Mode : {0} + {1}{2}", Input Binding String(Button(Ultimate)), Input Binding String(Button(Ability 2)),
			Global.EditMode && Local Player == Host Player ? Custom String("") : Custom String("\nRestart : {0} + {1}{2}",
			Global.rkey == 1 ? Input Binding String(Button(Crouch)) : Input Binding String(Button(Ultimate)), Input Binding String(Button(Interact)), Global.rkey == 1 ? 
			Custom String(" + {0}", Input Binding String(Button(Ability 2))) : Custom String("")))))))), Custom String("－－－－－－－－－－－－－－－－{0}",
			String Length(Input Binding String(Button(Interact))) > 1 ? (String Length(Input Binding String(Button(Interact))) > 3 ? (
			String Length(Input Binding String(Button(Interact))) > 5 ? Custom String("－－－－－－") : Custom String("－－－")) : Custom String(
			"－－")) : Custom String(""))), Null, Right, 100, Null, Custom Color(240, 230, 255, 255), Null, Visible To and String,
			Default Visibility);
		Create HUD Text(Filtered Array(Global.ShowHotKeyPlayers, Current Array Element.freeMode || Current Array Element.finished), Null, Custom String("{0}\n{1}", Custom String("{0}", Hero(
			Mercy)) == Custom String("메르시") ? Custom String("앞으로 텔포 : Hold {0}\n{1}", Input Binding String(Button(Reload)), Custom String(
			"임시 CP 설정 : 두 번 탭 {0}{1}", Input Binding String(Button(Ability 2)),
			Global.EditMode && Local Player == Host Player ? Custom String("") : Custom String("\n상대에게 텔포 : {0}{1}", Input Binding String(
			Button(Interact)), Global.EditMode ? Custom String("\n상대 레벨로 이동 : {0} + {1}", Input Binding String(Button(Interact)),
			Input Binding String(Button(Reload))) : Custom String("")))) : (Custom String("{0}", Hero(Mercy)) == Custom String("天使")
			? Custom String("　取消环境碰撞 | 长按 {0}\n{1}", Input Binding String(Button(Reload)), Custom String("设置临时传送点 | 双击 {0}{1}",
			Input Binding String(Button(Ability 2)), Global.EditMode && Local Player == Host Player ? Custom String("") : Custom String(
			"\n传送至玩家身边 | 瞄准后按 {0}{1}", Input Binding String(Button(Interact)), Global.EditMode ? Custom String(
			"\n传送至玩家关卡 | 瞄准后按 {0} + {1}", Input Binding String(Button(Interact)), Input Binding String(Button(Reload))) : Custom String(
			"")))) : Custom String("Cancel collision : Hold {0}\n{1}", Input Binding String(Button(Reload)), Custom String(
			"Set TP : Double click {0}{1}", Input Binding String(Button(Ability 2)),
			Global.EditMode && Local Player == Host Player ? Custom String("") : Custom String("\nTo player's position : {0}{1}",
			Input Binding String(Button(Interact)), Global.EditMode ? Custom String("\nTo player's level : {0} + {1}",
			Input Binding String(Button(Interact)), Input Binding String(Button(Reload))) : Custom String(""))))), Custom String(
			"－－－－－－－－－－－－－－－－{0}", String Length(Input Binding String(Button(Interact))) > 1 ? (String Length(Input Binding String(Button(
			Interact))) > 3 ? (String Length(Input Binding String(Button(Interact))) > 5 ? Custom String("－－－－－－") : Custom String("－－－"))
			: Custom String("－－")) : Custom String(""))), Null, Right, 101, Null, Custom Color(224, 204, 255, 150), Null,
			Visible To and String, Default Visibility);
		Create HUD Text(Filtered Array(Global.ShowHotKeyPlayers, !Global.EditMode || Current Array Element != Host Player), Null, Custom String("{0}\n{1}", Custom String("{0}", Hero(Mercy))
			== Custom String("메르시") ? Custom String("다음 레벨 : {0} + {1} + {2}", Input Binding String(Button(Ability 2)),
			Input Binding String(Button(Melee)), Custom String("{0}\n이전 레벨 : {1} + {2}", Input Binding String(Button(Primary Fire)),
			Input Binding String(Button(Ability 2)), Custom String("{0} + {1}", Input Binding String(Button(Melee)), Input Binding String(
			Button(Secondary Fire))))) : (Custom String("{0}", Hero(Mercy)) == Custom String("天使") ? Custom String(
			"　　　跳往下关 | {0} + {1} + {2}", Input Binding String(Button(Ability 2)), Input Binding String(Button(Melee)), Custom String(
			"{0}\n　　　退回上关 | {1} + {2}", Input Binding String(Button(Primary Fire)), Input Binding String(Button(Ability 2)), Custom String(
			"{0} + {1}", Input Binding String(Button(Melee)), Input Binding String(Button(Secondary Fire))))) : Custom String(
			"Next level : {0} + {1} + {2}", Input Binding String(Button(Ability 2)), Input Binding String(Button(Melee)), Custom String(
			"{0}\nPrev Level : {1} + {2}", Input Binding String(Button(Primary Fire)), Input Binding String(Button(Ability 2)),
			Custom String("{0} + {1}", Input Binding String(Button(Melee)), Input Binding String(Button(Secondary Fire)))))),
			Custom String("－－－－－－－－－－－－－－－－{0}", String Length(Input Binding String(Button(Interact))) > 1 ? (String Length(
			Input Binding String(Button(Interact))) > 3 ? (String Length(Input Binding String(Button(Interact))) > 5 ? Custom String(
			"－－－－－－") : Custom String("－－－")) : Custom String("－－")) : Custom String(""))), Null, Right, 102, Null, Custom Color(209, 179, 255, 255), Null,
			Visible To and String, Default Visibility);
		If(!Global.EditMode);
			Create HUD Text(All Players(All Teams), Null, Custom String("{0} {1}", Ability Icon String(Hero(Mercy), Button(Ultimate)),
				Custom String("made with a modified version of peace's editor [???] {0}", Ability Icon String(Hero(Mercy),
				Button(Ultimate)))), Custom String("－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－"), Left, -999, Null, Custom Color(224, 204, 255, 200), Null, Visible To and String, Default Visibility);
			"TOP5"
			Create HUD Text(Global.Top5 ? All Players(All Teams) : Null, Null, Custom String("－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－"),
				Global.Config[24] ? Global.Config[24] : Custom String("Today's Top {0}", Count Of(Global.Top5)), Left, -991, Null, Null,
				Global.Config[25], Visible To and String, Default Visibility);
			For Global Variable(I, 0, 5, 1);
				Create HUD Text(Global.Top5[Evaluate Once(Global.I)] ? All Players(All Teams) : Null, Hero Icon String(Hero(Mercy)), Custom String(
					"{0} {1}\n{2}", Array(Custom String("1st {0}", Icon String(Skull)), Custom String("2nd {0}", Icon String(Fire)), Custom String("3rd {0}", Icon String(Skull)), Custom String("4th {0}", Icon String(Fire)), Custom String(
					"5th {0}", Icon String(Skull)))[Evaluate Once(Global.I)], Global.Top5[Evaluate Once(Global.I)][0], Custom String(
					"{0} sec                           {1}{2}", Global.Top5[Evaluate Once(Global.I)][1], Global.FillSpace[String Length(
					Global.Top5[Evaluate Once(Global.I)][1]) - 5], Custom String("{0}", Hero(Mercy)) == Custom String("天使") ? Custom String(" ")
					: Custom String("  "))), Null, Left, -990 + Global.I, Global.Top5Color[Global.I], Global.Top5Color[Global.I],
					Global.Top5Color[Global.I], Visible To and String, Default Visibility);
			End;
			"HighLights"
			Create HUD Text(Is True For Any(All Players(All Teams), Current Array Element.bestRecord && Index Of Array Value(Global.Top5,
				Custom String("{0}", Current Array Element.playerNickname)) < 0) ? All Players(All Teams) : Null, Null, Custom String(
				"－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－"), Global.Config[26], Left, -1 * 900, Null, Null, Global.Config[27], Visible To,
				Default Visibility);
		Else;
			Create HUD Text(Host Player, Null, Array(Custom String(""), Custom String(
				"Create Point | Interact + Primary Fire\nInsert Point | Interact + Melee{0}", Custom String(
				"\nSelect Point | Rez + Primary / Secondary Fire\nMove Point | Interact + Rez{0}",
				Custom String("\nResurrect Bot | Interact + Reload{0}", Custom String("\nDelete Point | Interact + Secondary Fire [GUN]{0}",
				Array Contains(Array(Map(Busan), Map(Ilios), Map(Lijiang Tower), Map(Lijiang Tower), Map(Nepal), Map(Oasis)), Current Map)
				? Custom String("\nTeleport Other Map | Hold Interact") : Custom String(""))))), Custom String(
				"Create Orb | Interact + Primary Fire\nSelect Orb | Rez + Primary / Secondary Fire {0}", Custom String(
				"\nMove Position | Reload + Primary / Secondary Fire\nCreate Bot | Melee + Primary Fire\nDelete Bot | Melee + Secondary Fire{0}",
				Custom String("\nResurrect Bot | Interact + Melee{0}", Custom String("\nDelete Orb | Interact + Secondary Fire [GUN]")))),
				Custom String("Create Sphere | Interact + Primary Fire\nSelect Sphere | Rez + Primary / Secondary Fire{0}", Custom String(
				"\nMove Position | Reload + Primary / Secondary Fire{0}", Custom String(
				"\nDelete Sphere | Interact + Secondary Fire [GUN]"))), Custom String(
				"Create Cloud | Interact + Primary Fire\nSelect Cloud | Rez + Primary / Secondary Fire{0}", Custom String(
				"\nMove Position | Reload + Primary / Secondary Fire{0}", Custom String(
				"\nDelete Cloud | Interact + Secondary Fire [GUN]"))), Custom String(
				"CONTROLS:\nSelect Point | Rez + Melee + Prim. / Secon. Fire{0}", 
                Custom String("\nRestart: Interact + {0}", Global.rkey == 1 ? Custom String("Rez + Crouch") 
                : Custom String("Ultimate"))), Custom String("Create Enemy | Melee + Primary Fire [GUN]\nDelete Enemy | Melee + Secondary Fire [GUN]{0}", 
                Custom String("\nCreate Refresh Bot | Ability 2 + Melee [STAFF]\nDelete Refresh Bot | Ability 2 + Melee [GUN]{0}", 
                Custom String("\nResurrect Bot | Interact + Reload"))), Custom String("REZ on goal | Interact + Reload\nBot crouching | Interact + Ability 1{0}",
				Custom String("\nFree walking | Interact + Resurrect\nSwitch Crouch | Interact + Crouch{0}", 
				Custom String("\nUnlimited Ga | Interact + Ultimate\nSwitch Teleport | Interact + Jump{0}", 
				Custom String("\nAdjust Radius | Jump + Melee + Prim. / Secon. Fire [GUN]")))))[Host Player.editMode], 
                Custom String("－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－"),
				Left, 101, Null, Color(Rose), Null, Visible To Sort Order String and Color, Default Visibility);
            Create HUD Text(Host Player, Null, Array(Custom String(""), Custom String("CONTROLS:{0}", Custom String("\nCreate Bot | Melee + Primary Fire [STAFF]\nDelete Bot | Melee + Secondary Fire [STAFF]{0}", 
                Custom String("\nCreate Enemy | Melee + Primary Fire [GUN]\nDelete Enemy | Melee + Secondary Fire [GUN]{0}", 
                Custom String("\nRefresh GA after REZ | Interact + Ability 1 [STAFF]\nRefresh GA after KILL | Interact + Ability 1 [GUN]{0}", 
                Custom String("\nCreate Refresh Bot | Ability 2 + Melee [STAFF]\nDelete Refresh Bot | Ability 2 + Melee [GUN]{0}", 
                Custom String("\nExtra options mode | Crouch + Jump [STAFF]\nKill Bot Refresh Mode | Crouch + Jump [GUN]{0}")))))), 
                Custom String("CONTROLS:\nRefresh GA after REZ | Interact + Ability 1"), Custom String("CONTROLS:\nAdjust Radius | Jump + Melee + Primary / Secondary Fire"), 
                Custom String("CONTROLS:\nAdjust Level | Jump + Melee + Primary / Secondary Fire"), Custom String("PLAY MODE"), Custom String("REFRESH SECTION{0}",
				Custom String("\nCheckpoint mode | Crouch + Jump [GUN]\nExtra options mode | Crouch + Jump [STAFF]")),
				Custom String("EXTRA OPTIONS{0}", Custom String("\nCheckpoint mode | Crouch + Jump [STAFF]\nKill Bot Refresh mode | Crouch + Jump [GUN]")))[Host Player.editMode], 
				Custom String("－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－"), 
                Left, 100, Null, Color(Sky Blue), Null, Visible To Sort Order String and Color, Default Visibility);
			Create HUD Text(Host Player, Null, Custom String("Current Mode | {0} {1} \nExport data | {2}", Array(
				Custom String(""), Custom String("Checkpoint"), Custom String("Orb"), Custom String("Sphere"), Custom String("Cloud"), Custom String("Play"), Custom String("Refresh"), Custom String("Extra Options"))
				[Host Player.editMode], Host Player.editMode >= 6 ? Custom String("({0} + {1} to Switch)", Input Binding String(Button(Crouch)), Input Binding String(Button(Jump))) : 
				Custom String("(Double click {0} to Switch)", Input Binding String(Button(Interact))), Custom String("Hold {0} + {1} + S", Input Binding String(
				Button(Crouch)), Input Binding String(Button(Ability 1)))), Custom String("－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－"), Left, 102, Null,
				Custom Color(205, 209, 211, 255), Null, Visible To Sort Order String and Color, Default Visibility);
			Create Icon(Count Of(Global.Checkpoint) > 0 ? All Players(All Teams) : Null, Host Player.checkpointA[0] + Vector(0, 1.200, 0),
				Flag, Visible To and Position, Custom Color(172, 117, 255, 255), True);
			Create Effect(Count Of(Global.Checkpoint) > 0 ? All Players(All Teams) : Null, Light Shaft, Custom Color(172, 117, 255, 255), Host Player.checkpointA[0],
				Host Player.checkpointA[1], Visible To Position and Radius);
			Create In-World Text(Count Of(Global.Checkpoint) > 0 ? All Players(All Teams) : Null, Custom String("LEVEL : {0}\n{1}",
				Host Player.checkpoint, Custom String("RADIUS : {0}\n{1}", Host Player.checkpointA[1], Custom String("CROUCH : {0}\n{1}",
				Host Player.checkpointA[2] ? Custom String("√") : Custom String("×"), Custom String("RESURRECT : {0}\n{1}",
				Host Player.checkpointA[3][1] ? Custom String("√") : Custom String("×"), Custom String("Resurrection refresh GA : {0}\n{1}",
				Host Player.checkpointA[3][1] && Host Player.checkpointA[3][2] ? Custom String("√") : Custom String("×"), Custom String(
				"UNLIMITED GA : {0}\n{1}", Host Player.checkpointA[4] ? Custom String("√") : Custom String("×"), Custom String(
				"REZ ON GOAL  : {0}\n{1}", Host Player.checkpointA[10] ? Custom String("√") : Custom String("×"), Custom String(
				"TELEPORT : {0}\n{1}", Host Player.checkpointA[5] ? Custom String("√") : Custom String("×"), Custom String("POSITION : {0}",
				Host Player.checkpointA[0]))))))))), Host Player.checkpointA[0] + Vector(0, 0.500, 0), 1.200, Do Not Clip,
				Visible To Position and String, Color(Rose), Default Visibility);
			Create Effect(Count Of(Host Player.currentOrb) > 0 && Host Player.editMode == 2 ? All Players(All Teams) : Null, Good Aura,
				Host Player.currentOrb[Global.CurrentChooseOrb][1] ? Global.Config[44] : Global.Config[42], Global.ChooseOrbPosition, 1.300,
				Visible To Position Radius and Color);
			Create In-World Text(Count Of(Host Player.currentOrb) > 0 && Host Player.editMode == 2 ? All Players(All Teams) : Null,
				Custom String("TELEPORT BOT : {0}\n{1}", Host Player.currentOrb[Global.CurrentChooseOrb][1] ? Custom String("√")
				: Custom String("×"), Custom String("RESURRECT : {0}\n{1}", Host Player.currentOrb[Global.CurrentChooseOrb][2] ? Custom String(
				"√") : Custom String("×"), Custom String("Resurrection refresh GA : {0}\n{1}",
				Host Player.currentOrb[Global.CurrentChooseOrb][2] && Host Player.currentOrb[Global.CurrentChooseOrb][3] ? Custom String("√")
				: Custom String("×"), Custom String("DISTANCE : {0}\n{1}", Distance Between(Host Player, Global.ChooseOrbPosition)
				- Host Player.currentOrb[Global.CurrentChooseOrb][0], Custom String("POSITION : {0}", Global.ChooseOrbPosition))))),
				Global.ChooseOrbPosition + Vector(0, 0.500, 0), 1.200, Do Not Clip, Visible To Position and String, Color(Rose),
				Default Visibility);
			Create In-World Text(Host Player.checkpointA[9][0] ? All Players(All Teams) : Null,
				Custom String("TELEPORT BOT : {0}\n{1}", Host Player.checkpointA[9][2] ? Custom String("√")
				: Custom String("×"), Custom String("RESURRECT : {0}\n{1}", Host Player.checkpointA[9][3] ? Custom String(
				"√") : Custom String("×"), Custom String("Resurrection refresh GA : {0}\n{1}",
				Host Player.checkpointA[9][3] && Host Player.checkpointA[9][4] ? Custom String("√")
				: Custom String("×"), Custom String("KILL REFRESH GA : {0}\n{1}", Host Player.checkpointA[9][1] ? Custom String("√")
				: Custom String("×"), Custom String("POSITION : {0}", Host Player.checkpointA[9][0]))))),
				Host Player.checkpointA[9][0] - Vector(0, 0.8, 0), 1.05, Do Not Clip, Visible To Position and String, Color(Red),
				Default Visibility);
			Create Effect(Count Of(Host Player.currentSphere) > 0 && Host Player.editMode == 3 ? All Players(All Teams) : Null, Orb, Color(
				Rose), Global.ChooseSpherePosition, 1, Visible To Position and Radius);
			Create In-World Text(Count Of(Host Player.currentSphere) > 0 && Host Player.editMode == 3 ? All Players(All Teams) : Null,
				Custom String("RADIUS: {0}\n{1}", Host Player.currentSphere[Global.CurrentChooseSphere][1], Custom String(
				"DISTANCE : {0}\n{1}", Distance Between(Host Player, Global.ChooseSpherePosition)
				- Host Player.currentSphere[Global.CurrentChooseSphere][0], Custom String("POSITION : {0}", Global.ChooseSpherePosition))),
				Global.ChooseSpherePosition + Vector(0, 0.500, 0), 1.200, Do Not Clip, Visible To Position and String, Color(Rose),
				Default Visibility);
			Create Effect(Count Of(Host Player.currentCloud) > 0 && Host Player.editMode == 4 ? All Players(All Teams) : Null, Good Aura,
				Color(Rose), Global.ChooseCloudPosition, 1.300, Visible To Position and Radius);
			Create In-World Text(Count Of(Host Player.currentCloud) > 0 && Host Player.editMode == 4 ? All Players(All Teams) : Null,
				Custom String("LEVEL : {0}\n{1}", Host Player.currentCloud[Global.CurrentChooseCloud][1], Custom String("DISTANCE : {0}\n{1}",
				Distance Between(Host Player, Global.ChooseCloudPosition) - Host Player.currentCloud[Global.CurrentChooseCloud][0],
				Custom String("POSITION : {0}", Global.ChooseCloudPosition))), Global.ChooseCloudPosition + Vector(0, 0.500, 0), 1.200,
				Do Not Clip, Visible To Position and String, Color(Rose), Default Visibility);
		End;
	}
}

rule("Subroutine CreatePlayerHUDAndEffects")
{
	event
	{
		Subroutine;
		CreatePlayerHUDAndEffects;
	}

	actions
	{
		Create In-World Text(All Players(All Teams), Custom String("{0}  {1}",
			Event Player.playerNickname, Global.EditMode ? Event Player.checkpoint : Event Player.displayedCheckpoint), Event Player,
			1.300, Do Not Clip, Visible To Position String and Color, Event Player.playerColor, Default Visibility);
		Create HUD Text(Event Player, Null, Custom String("{0} {1} / {2}", Custom String("{0}", Hero(Mercy)) == Custom String("메르시")
			? Global.Config[13][1] : (Custom String("{0}", Hero(Mercy)) == Custom String("天使")
			? Global.Config[13][2] : Global.Config[13][0]), Global.EditMode ? Event Player.checkpoint : Event Player.displayedCheckpoint,
			Custom String("{0}{1}", Global.EditMode ? Count Of(Global.Checkpoint) - 1 : Evaluate Once(Count Of(Filtered Array(
			Global.Checkpoint, !Current Array Element[5])) - 1), Global.EditMode && Is True For Any(Global.Checkpoint,
			Current Array Element[5]) ? Custom String(" [{0}]", Count Of(Filtered Array(Global.Checkpoint, !Current Array Element[5])) - 1)
			: Custom String(""))), Null, Top, 1, Null, Global.Config[14], Null, Visible To and String,
			Default Visibility);
		Create HUD Text(Event Player.checkpointA[3][1] || Event Player.checkpointA[9][3] || Event Player.checkpointA[6][0][2] ? Event Player : Null, Null, Null, Custom String(
			"distance to {0} {1}: {2}", Global.Config[11] ? Global.Config[11] : (Global.allyname == 1 ? Custom String("ally") : (Global.allyname == 2 ? Custom String("target") : Global.allybot)), 
			Hero Icon String(Global.allybot), Is Alive(Event Player.targetBot) ? Custom String("not yet{0}", Global.TipHudSpaceHolder) 
			: Custom String("{0}m{1}", Distance Between(Event Player.targetBot, Event Player), Custom String("\n{0}", Global.TipHudSpaceHolder))), 
			Top, 2, Null, Null, Global.gamer[1], Visible To and String, Default Visibility);
		Create Effect(Event Player.checkpointA[0] && (Global.EditMode || Event Player.checkpointB[0]) ? Event Player : Null, Ring,
			!Event Player.checkpointA[5] ? Global.Config[0] : Global.Config[10], Event Player.checkpointA[0], Event Player.checkpointA[1],
			Visible To Position Radius and Color);
		Create Icon((Event Player.checkpointA[3][0] && Event Player.editMode != 2 && !Event Player.nearestOrb)
			|| Event Player.nearestOrb[1] ? Event Player : Null, Is Alive(Event Player.targetBot) ? Event Player.targetBot : Position Of(
			Event Player.targetBot) + Vector(0, 2, 0), Heart, Visible To Position and Color,
			Event Player.checkpointA[2] ? Global.Config[1][0] : Global.Config[1][1], True);
		Create Icon(Event Player.checkpointB[0] ? Event Player : Null, Event Player.checkpointB[0] + Vector(0,
			1.300, 0), Moon, Visible To and Position, Global.Config[5], True);
		Create Effect(Event Player.checkpointB[0] ? Event Player : Null, Ring,
			!Event Player.checkpointB[5] ? Global.Config[7] : Global.Config[10], Event Player.checkpointB[0], Event Player.checkpointB[1],
			Visible To Position Radius and Color);
		If(!Global.EditMode);
			Create HUD Text(Event Player.bestRecord && Index Of Array Value(Global.Top5, Event Player.playerNickname) < 0 ? All Players(
				All Teams) : Null, Hero Icon String(Hero(Mercy)), Custom String("{0}\n{1}", Event Player.playerNickname, Custom String(
				"{0} sec                           {1}{2}", Event Player.bestRecord, Global.FillSpace[String Length(Event Player.bestRecord)
				- 5], Custom String("{0}", Hero(Mercy)) == Custom String("天使") ? Custom String(" ") : Custom String("  "))), Null, Left,
				Event Player.bestRecord / 100, Global.Config[28], Global.Config[28], Global.Config[28], Visible To Sort Order and String,
				Default Visibility);
			Create HUD Text(
				Global.Tips[Event Player.displayedCheckpoint] && !Event Player.freeMode && !Event Player.finished ? Event Player : Null, Null,
				Null, Custom String("{0} :                          \n  {1}\n", Hero Icon String(Global.allybot),
				Global.Tips[Event Player.displayedCheckpoint]), Top, 100, Null, Null, Global.Config[49], Visible To and String,
				Default Visibility);
			Create HUD Text(Event Player, Null, Custom String("{0}", Hero(Mercy)) == Custom String("메르시") ? Custom String(
				"              실수: {0} \n             시간: {1} 초", Event Player.cheat ? Custom String("∞") : Event Player.mistake,
				Event Player.cheat ? Custom String("∞") : Event Player.time) : (Custom String("{0}", Hero(Mercy)) == Custom String("天使")
				? Custom String("          失误: {0} 次\n　　　　　　　　　　时间: {1} 秒", Event Player.cheat ? Custom String("∞") : Event Player.mistake,
				Event Player.cheat ? Custom String("∞") : Event Player.time) : Custom String(
				"           Mistakes: {0} Times\n           Time: {1} Seconds", Event Player.cheat ? Custom String("∞") : Event Player.mistake,
				Event Player.cheat ? Custom String("∞") : Event Player.time)), Null, Right, 1, Null, Custom Color(240, 230, 255, 255), Null, Visible To and String,
				Default Visibility);
			Create HUD Text(Event Player.finished ? Event Player : Null, Null, Null, Custom String("  {0} {1}", Hero Icon String(
				All Heroes[Event Player.chooseHero]), Custom String("{0} {1} - {2}", String("Hero"), Event Player.chooseHero + 1,
				All Heroes[Event Player.chooseHero])), Right, 5, Null, Null, Custom Color(240, 230, 255, 255), Visible To and String, Default Visibility);
			Create HUD Text(Event Player.finished ? Event Player : Null, Null, Custom String("{0}", Hero(Mercy)) == Custom String("메르시")
				? Custom String("        Voice: {0}{1}  {2}", Event Player.voice, Event Player.voice % 1 == 0 ? Custom String(".00")
				: Custom String(""), Custom String("Trajectory: {0}{1}\r\n{2}", Event Player.projectile / 100,
				Event Player.projectile % 100 == 0 ? Custom String(".00") : Custom String(""), Custom String("        Body size: {0}{1}  {2}",
				Event Player.bodySize, Event Player.bodySize % 1 == 0 ? Custom String(".00") : Custom String(""), Custom String(
				"Barrier: {0}{1}\n ", Event Player.barrierSize, Event Player.barrierSize % 1 == 0 ? Custom String(".00") : Custom String(
				""))))) : (Custom String("{0}", Hero(Mercy)) == Custom String("天使") ? Custom String("　　　　　音调: {0}{1}  {2}", Event Player.voice,
				Event Player.voice % 1 == 0 ? Custom String(".00") : Custom String(""), Custom String("弹道: {0}{1}\r\n{2}",
				Event Player.projectile / 100, Event Player.projectile % 100 == 0 ? Custom String(".00") : Custom String(""), Custom String(
				"　　　　　体型: {0}{1}  {2}", Event Player.bodySize, Event Player.bodySize % 1 == 0 ? Custom String(".00") : Custom String(""),
				Custom String("屏障: {0}{1}\n ", Event Player.barrierSize, Event Player.barrierSize % 1 == 0 ? Custom String(".00")
				: Custom String(""))))) : Custom String("        Voice: {0}{1}  {2}", Event Player.voice,
				Event Player.voice % 1 == 0 ? Custom String(".00") : Custom String(""), Custom String("Trajectory: {0}{1}\r\n{2}",
				Event Player.projectile / 100, Event Player.projectile % 100 == 0 ? Custom String(".00") : Custom String(""), Custom String(
				"        Body size: {0}{1}  {2}", Event Player.bodySize, Event Player.bodySize % 1 == 0 ? Custom String(".00") : Custom String(
				""), Custom String("Barrier: {0}{1}\n ", Event Player.barrierSize, Event Player.barrierSize % 1 == 0 ? Custom String(".00")
				: Custom String("")))))), Null, Right, 6, Custom Color(224, 204, 255, 255), Custom Color(224, 204, 255, 255), Custom Color(224, 204, 255, 255), Visible To and String, Default Visibility);
		End;
			Create In-World Text(Event Player.checkpointB[0] ? Event Player : Null,
				Global.Config[2], Event Player.checkpointB[0] + Vector(0, 0.200, 0),
				Global.Config[3], Do Not Clip, Visible To Position and String, Global.Config[4], Default Visibility);
	}
}

rule("Subroutine TeleportToCurrentCheckpoint")
{
	event
	{
		Subroutine;
		TeleportToCurrentCheckpoint;
	}

	actions
	{
		Call Subroutine(CancelAbilityAndMomentum);
		Event Player.mistake += Event Player.checkpoint != 0 && !Event Player.freeMode && Distance Between(Event Player,
			Event Player.checkpointA[0]) > Event Player.checkpointA[1] ? 1 : 0;
		Teleport(Event Player, Event Player.checkpointA[0]);
		Set Status(Event Player, Null, Rooted, 0.250);
		Call Subroutine(SetCurrentAbilities);
		If((Event Player.currentOrb || Event Player.checkpointA[9][2]) && Event Player.editMode != 6);
			Call Subroutine(TeleportCurrentBot);
		End;
		If(Event Player.checkpointA[9]);
        	If(!Is Alive(Event Player.enmy));
            	Resurrect(Event Player.enmy);
        	End;
        	Set Player Health(Event Player.enmy, 25);
        	Teleport(Event Player.enmy, Event Player.checkpointA[9][0]);
		End;
	}
}

rule("Subroutine ContinueTiming")
{
	event
	{
		Subroutine;
		ContinueTiming;
	}

	actions
	{
		If(
			!Global.EditMode && !Event Player.finished && !Event Player.freeMode && !Event Player.cheat && Event Player.leaveOriginalCheckpoint);
			Chase Player Variable At Rate(Event Player, time, 16200, 1, None);
		End;
	}
}

rule("Subroutine GetCurrentCheckpoint")
{
	event
	{
		Subroutine;
		GetCurrentCheckpoint;
	}

	actions
	{
		Event Player.checkpointA = Global.Checkpoint[Event Player.checkpoint] ? Global.Checkpoint[Event Player.checkpoint] : Null;
		Event Player.checkpointB = Global.Checkpoint[Event Player.checkpoint + 1] ? Global.Checkpoint[Event Player.checkpoint + 1] : Null;
		Event Player.displayedCheckpoint = Event Player.checkpoint - Count Of(Filtered Array(Global.Checkpoint,
			Current Array Index <= Event Player.checkpoint && Current Array Element[5]));
		Event Player.numberOfNeedResurrect = ((Event Player.checkpointA[9][3] ? 1 : 0) + (Event Player.checkpointA[3][1] ? 1 : 0)) + Count Of(Filtered Array(
			Event Player.checkpointA[6], Current Array Element[2] && Current Array Element[1]));
		Event Player.currentOrb = Event Player.checkpointA[6];
		Event Player.tempCurrentOrb = Event Player.currentOrb;
		Event Player.currentSphere = Event Player.checkpointA[7];
		Event Player.currentCloud = Event Player.checkpointA[8];
	}
}

rule("Subroutine  SetCurrentAbilities")
{
	event
	{
		Subroutine;
		SetCurrentAbilities;
	}

	actions
	{
		If(Event Player.checkpointA[2]);
			Allow Button(Event Player, Button(Crouch));
		Else;
			Disallow Button(Event Player, Button(Crouch));
		End;
		Set Ability 1 Enabled(Event Player, Event Player.checkpointA[3][0] ? True : False);
		Set Ability 2 Enabled(Event Player, Event Player.checkpointA[3][1]);
		If(Event Player.checkpointA[3][1]);
			Kill(Event Player.targetBot, Null);
			Event Player.resurrectTime = 0;
		Else If(Event Player.editMode != 6 && !Event Player.checkpointA[9][3]);
			Resurrect(Event Player.targetBot);
		End;
		Event Player.ability2 = Event Player.checkpointA[3][1];
		Event Player.resurrectNumber = 0;
        Event Player.used = False;
		Event Player.tempCurrentOrb = Event Player.currentOrb;
		Event Player.nearestOrb = Null;
		Event Player.isSetAbilities = True;
	}
}

rule("Subroutine TeleportCurrentBot")
{
	event
	{
		Subroutine;
		TeleportCurrentBot;
	}

	actions
	{
		Teleport(Event Player.targetBot, Event Player.checkpointA[3][0] ? Event Player.checkpointA[3][0] : Nearest Walkable Position(
			Vector(-500, -500, -500)));
		If(Event Player.checkpointA[9]);
    		If(!Is Alive(Event Player.enmy));
        	    Resurrect(Event Player.enmy);
        	End;
        	Set Player Health(Event Player.enmy, 25);
        	Teleport(Event Player.enmy, Event Player.checkpointA[9][0]);
		Else If(Entity Exists(Event Player.enmy));
			Teleport(Event Player.enmy, Nearest Walkable Position(Vector(-500, -500, -500)));
		End;
		Resurrect(!Is Alive(Event Player.targetBot) && !Event Player.checkpointA[3][1] ? Event Player.targetBot : Null);
        Wait(0.016, Ignore Condition);
		Event Player.aura = True;
	}
}

rule("Subroutine  DisplayCurrentAbilityMsgs")
{
	event
	{
		Subroutine;
		DisplayCurrentAbilityMsgs;
	}

	actions
	{
		Abort If(Event Player.checkpointA[5] || !Event Player.checkpointB);
		If(Count Of(Event Player.currentOrb) == 1);
			Small Message(Event Player, Global.Config[20] ? Custom String("   {0}", Global.Config[20]) : (Custom String("{0}", Hero(Mercy)) == Custom String("메르시")
				? Custom String("먹어야 할 오브 갯수 {0}.", Count Of(Event Player.currentOrb)) : (Custom String("{0}", Hero(Mercy)) == Custom String(
				"天使") ? Custom String("本关有 {0} 个球要捡呀", Count Of(Event Player.currentOrb)) : Custom String("   This level has an orb to pick up"))));
		End;
		If(!Event Player.checkpointA[3][0]);
			Small Message(Event Player, Global.Config[19] ? Custom String("   {0}", Global.Config[19]) : Custom String("   This level currently has no target {0}.", Global.allybot));
		Else;
			If(Count Of(Filtered Array(Global.Checkpoint, Current Array Element[2])) >= Count Of(Filtered Array(Global.Checkpoint,
				!Current Array Element[2])) && !Event Player.checkpointA[2]);
			Else If(Count Of(Filtered Array(Global.Checkpoint, Current Array Element[2])) < Count Of(Filtered Array(Global.Checkpoint,
					!Current Array Element[2])) && Event Player.checkpointA[2]);
				Small Message(Event Player, Custom String("{0}", Hero(Mercy)) == Custom String("메르시") ? Global.Config[18][1] : (Custom String(
					"{0}", Hero(Mercy)) == Custom String("天使") ? Global.Config[18][2] : Custom String("   {0}", Global.Config[18][0])));
			End;
			If(Event Player.checkpointA[4]);
				Small Message(Event Player, Custom String("{0}", Hero(Mercy)) == Custom String("메르시") ? Global.Config[29][1] : (Custom String(
					"{0}", Hero(Mercy)) == Custom String("天使") ? Global.Config[29][2] : Custom String("   {0}", Global.Config[29][0])));
			Else If(Count Of(Filtered Array(Global.Checkpoint, Current Array Element[4])) >= Count Of(Filtered Array(Global.Checkpoint,
					!Current Array Element[4])) && !Event Player.checkpointA[4]);
				Small Message(Event Player, Custom String("{0}", Hero(Mercy)) == Custom String("메르시") ? Global.Config[30][1] : (Custom String(
					"{0}", Hero(Mercy)) == Custom String("天使") ? Global.Config[30][2] : Custom String("   {0}", Global.Config[30][0])));
			End;
		End;
		If(Event Player.checkpointA[10] && (Event Player.checkpointA[3][1] || Event Player.checkpointA[9][3]) && !Global.rezonpoint);
			Small Message(Event Player, Custom String("   {0}", Global.Config[51][0]));
		Else If((Event Player.checkpointA[3][1] || Event Player.checkpointA[9][3]) && !Event Player.checkpointA[10] && Global.rezonpoint);
			Small Message(Event Player, Custom String("   {0}", Global.Config[51][1]));
		End;
	}
}

rule("Subroutine  CreateCurrentEffects")
{
	event
	{
		Subroutine;
		CreateCurrentEffects;
	}

	actions
	{
		Destroy Effect(Event Player.orbEffects);
		Destroy Effect(Event Player.botEffects);
		Event Player.orbEffects = Empty Array;
		Event Player.botEffects = Empty Array;
		While(Count Of(Event Player.orbIcons) > 0);
			Destroy Icon(Event Player.orbIcons[0]);
			Modify Player Variable(Event Player, orbIcons, Remove From Array By Index, 0);
			Destroy Icon(Event Player.botIcons[0]);
			Modify Player Variable(Event Player, botIcons, Remove From Array By Index, 0);
		End;
		Destroy Effect(Event Player.sphereEffects);
		Event Player.sphereEffects = Empty Array;
		Destroy Effect(Event Player.cloudEffects);
		Event Player.cloudEffects = Empty Array;
		If(Global.EditMode && Event Player == Host Player);
			Global.CurrentChooseOrb = 0;
			Global.ChooseOrbPosition = Event Player.currentOrb[Global.CurrentChooseOrb][0];
			Global.CurrentChooseSphere = 0;
			Global.ChooseSpherePosition = Event Player.currentSphere[Global.CurrentChooseSphere][0];
			Global.CurrentChooseCloud = 0;
			Global.ChooseCloudPosition = Event Player.currentCloud[Global.CurrentChooseCloud][0];
		End;
		For Player Variable(Event Player, i, 0, Count Of(Event Player.currentOrb), 1);
			If(Event Player.currentOrb[Event Player.i][1]);
				Create Icon(Is True For Any(Event Player.tempCurrentOrb, Current Array Element[0] == Evaluate Once(
					Event Player.currentOrb[Event Player.i][0])) || Event Player.finished || Event Player.freeMode ? Event Player : Null,
					Event Player.currentOrb[Event Player.i][1] + Vector(0, 2, 0), Heart, Visible To,
					Event Player.checkpointA[2] ? Global.Config[1][0] : Global.Config[1][1], True);
				Event Player.botIcons[Event Player.i] = Last Created Entity;
				Create Effect(Is True For Any(Event Player.tempCurrentOrb, Current Array Element[0] == Evaluate Once(
					Event Player.currentOrb[Event Player.i][0])) || Event Player.finished || Event Player.freeMode ? Event Player : Null,
					Good Aura, Event Player.currentOrb[Event Player.i][2] ? Global.Config[48] : Global.Config[46],
					Event Player.currentOrb[Event Player.i][1] + Vector(0, 0.800, 0), 1, Visible To);
				Event Player.botEffects[Event Player.i] = Last Created Entity;
				Create Icon(Is True For Any(Event Player.tempCurrentOrb, Current Array Element[0] == Evaluate Once(
					Event Player.currentOrb[Event Player.i][0])) || Event Player.finished || Event Player.freeMode ? Event Player : Null,
					Event Player.currentOrb[Event Player.i][0] + Vector(0, 0.500, 0), Recycle, Visible To,
					Event Player.currentOrb[Event Player.i][2] ? Global.Config[47] : Global.Config[45], True);
			Else;
				Create Icon(Is True For Any(Event Player.tempCurrentOrb, Current Array Element[0] == Evaluate Once(
					Event Player.currentOrb[Event Player.i][0])) || Event Player.finished || Event Player.freeMode ? Event Player : Null,
					Event Player.currentOrb[Event Player.i][0] + Vector(0, 0.500, 0), Radioactive, Visible To, Global.Config[43], True);
			End;
			Event Player.orbIcons[Event Player.i] = Last Created Entity;
			If(Global.defaultorb == 1);
				Create Effect(Is True For Any(Event Player.tempCurrentOrb, Current Array Element[0] == Evaluate Once(
					Event Player.currentOrb[Event Player.i][0])) || Event Player.finished || Event Player.freeMode ? Event Player : Null, Sphere,
					Event Player.currentOrb[Event Player.i][1] ? Global.Config[44] : Global.Config[42], Event Player.currentOrb[Event Player.i][0],
					0.5, Visible To);
			Else;
				Create Effect(Is True For Any(Event Player.tempCurrentOrb, Current Array Element[0] == Evaluate Once(
					Event Player.currentOrb[Event Player.i][0])) || Event Player.finished || Event Player.freeMode ? Event Player : Null, Orb,
					Event Player.currentOrb[Event Player.i][1] ? Global.Config[44] : Global.Config[42], Event Player.currentOrb[Event Player.i][0],
					1, Visible To);
			End;
			Event Player.orbEffects[Event Player.i] = Last Created Entity;
		End;
		For Player Variable(Event Player, i, 0, Count Of(Event Player.currentSphere), 1);
			Create Effect(Event Player, Sphere, Global.Config[40], Event Player.currentSphere[Event Player.i][0],
				Event Player.currentSphere[Event Player.i][1], Visible To);
			Event Player.sphereEffects[Event Player.i] = Last Created Entity;
		End;
		For Player Variable(Event Player, i, 0, Count Of(Event Player.currentCloud), 1);
			Create Effect(Event Player, Cloud, Global.Config[41], Event Player.currentCloud[Event Player.i][0], 1, Visible To);
			Event Player.cloudEffects[Event Player.i] = Last Created Entity;
		End;
	}
}

rule("Subroutine CreateCurrentWorldText")
{
	event
	{
		Subroutine;
		CreateCurrentWorldText;
	}

	actions
	{
		Destroy In-World Text(Event Player.currentWorldText);
		If(Global.WorldTexts[Event Player.displayedCheckpoint] && !Event Player.checkpointA[5]);
			Create In-World Text(Event Player, Global.WorldTexts[Event Player.displayedCheckpoint][0],
				Global.WorldTexts[Event Player.displayedCheckpoint][1] ? Global.WorldTexts[Event Player.displayedCheckpoint][1] : Event Player.checkpointB[0] + Vector(
				0, 1.800, 0), Global.WorldTexts[Event Player.displayedCheckpoint][2], Do Not Clip, Visible To,
				Global.WorldTexts[Event Player.displayedCheckpoint][3], Default Visibility);
			Event Player.currentWorldText = Last Text ID;
		End;
	}
}

rule("Subroutine DisplayCurrentCustomBigMsgs")
{
	event
	{
		Subroutine;
		DisplayCurrentCustomBigMsgs;
	}

	actions
	{
		If(Global.BigMsgs[Event Player.displayedCheckpoint] && !Event Player.checkpointA[5]);
			Event Player.currentBigMsg = Filtered Array(Global.BigMsgs[Event Player.displayedCheckpoint], Current Array Element);
			While(Count Of(Event Player.currentBigMsg) > 0);
				Wait(0.500, Ignore Condition);
				Big Message(Event Player, Event Player.currentBigMsg[0]);
				Wait(2.300, Ignore Condition);
				Modify Player Variable(Event Player, currentBigMsg, Remove From Array By Index, 0);
			End;
		End;
	}
}

rule("Subroutine DisplayCurrentCustomSmallMsgs")
{
	event
	{
		Subroutine;
		DisplayCurrentCustomSmallMsgs;
	}

	actions
	{
		If(Global.SmallMsgs[Event Player.displayedCheckpoint] && !Event Player.checkpointA[5]);
			Event Player.currentSmallMsg = Filtered Array(Global.SmallMsgs[Event Player.displayedCheckpoint], Current Array Element);
			While(Count Of(Event Player.currentSmallMsg) > 0);
				Wait(0.500, Ignore Condition);
				Small Message(Event Player, Event Player.currentSmallMsg[0]);
				Wait(2.300, Ignore Condition);
				Modify Player Variable(Event Player, currentSmallMsg, Remove From Array By Index, 0);
			End;
		End;
	}
}

rule("Subroutine EnableAllAbilities")
{
	event
	{
		Subroutine;
		EnableAllAbilities;
	}

	actions
	{
		Allow Button(Event Player, Button(Crouch));
		Set Ability 1 Enabled(Event Player, True);
		Set Ability 2 Enabled(Event Player, True);
		Set Ultimate Ability Enabled(Event Player, True);
		Set Ultimate Charge(Event Player, 100);
	}
}

rule("Subroutine  CancelAbilityAndMomentum")
{
	event
	{
		Subroutine;
		CancelAbilityAndMomentum;
	}

	actions
	{
		Cancel Primary Action(Event Player);
		Apply Impulse(Event Player, Up, 0, To World, Cancel Contrary Motion XYZ);
		Wait(0.016, Restart When True);
		Apply Impulse(Event Player, Normalize(Velocity Of(Event Player)) * -1 * 1, Speed Of(Event Player), To World,
			Incorporate Contrary Motion);
	}
}

rule("Subroutine ValidationPlayerData")
{
	event
	{
		Subroutine;
		ValidationPlayerData;
	}

	actions
	{
		If(Index Of Array Value(Global.PlayersData, Custom String("{0}", Event Player)) > -1);
			Event Player.checkpoint = First Of(Filtered Array(Global.PlayersData, Current Array Element[0] == Custom String("{0}",
				Event Player)))[1];
			Event Player.time = First Of(Filtered Array(Global.PlayersData, Current Array Element[0] == Custom String("{0}", Event Player)))
				[2];
			Event Player.mistake = First Of(Filtered Array(Global.PlayersData, Current Array Element[0] == Custom String("{0}", Event Player)))
				[3];
			Small Message(Event Player, Custom String("{0}", Hero(Mercy)) == Custom String("메르시") ? Custom String("귀환을 환영하다, {0}",
				Event Player.playerNickname) : (Custom String("{0}", Hero(Mercy)) == Custom String("天使") ? Custom String("欢迎回来, {0}",
				Event Player.playerNickname) : Custom String("Welcome back, {0}", Event Player.playerNickname)));
		Else;
			Global.PlayersData[Count Of(Global.PlayersData)] = Array(Custom String("{0}", Event Player), Event Player.checkpoint,
				Event Player.time, Event Player.mistake);
		End;
		Event Player.dataIndex = Index Of Array Value(Global.PlayersData, Custom String("{0}", Event Player)) / 4;
	}
}

rule("Subroutine EditPlayerData")
{
	event
	{
		Subroutine;
		EditPlayerData;
	}

	actions
	{
		Global.PlayersData[Event Player.dataIndex] = Event Player.checkpoint < Count Of(Global.Checkpoint) - 1 ? Array(Custom String("{0}",
			Event Player), Event Player.checkpoint, Event Player.time, Event Player.mistake) : Array(Custom String("{0}", Event Player), 0,
			0, 0);
	}
}

rule("Subroutine TempSavePlayerData")
{
	event
	{
		Subroutine;
		TempSavePlayerData;
	}

	actions
	{
		If(!Global.EditMode);
			If(!Event Player.cheat);
				Stop Chasing Player Variable(Event Player, time);
				Call Subroutine(EditPlayerData);
				Event Player.playerData = Filtered Array(Global.PlayersData[Event Player.dataIndex], Current Array Index != 0);
				Modify Player Variable(Event Player, playerData, Append To Array, Event Player.displayedCheckpoint);
				If(!Event Player.finished);
					Small Message(Event Player, Custom String("{0}", Hero(Mercy)) == Custom String("메르시") ? Custom String(
						"레벨이 스킵되어 타이머가 멈췄어요. {0} 다시 재생하려면 원래 레벨로 돌아가세요. >_<", Event Player.playerData[3]) : (Custom String("{0}", Hero(Mercy))
						== Custom String("天使") ? Custom String("计时器已暂停,再次回到第{0}关恢复计时", Event Player.playerData[3]) : Custom String(
						"Timer paused, Return to the level {0} again to continue timing >_<", Event Player.playerData[3])));
					Big Message(Event Player, Custom String("{0}", Hero(Mercy)) == Custom String("메르시") ? Custom String("{0}, Return to level {1}",
						Custom String("{0} + {1} + {2}", Input Binding String(Button(Interact)), Input Binding String(Button(Ability 2)),
						Input Binding String(Button(Melee))), Event Player.playerData[3]) : (Custom String("{0}", Hero(Mercy)) == Custom String("天使")
						? Custom String("{0}, 快速回到第{1}关", Custom String("{0} + {1} + {2}", Input Binding String(Button(Interact)),
						Input Binding String(Button(Ability 2)), Input Binding String(Button(Melee))), Event Player.playerData[3]) : Custom String(
						"{0}, Return to level {1}", Custom String("{0} + {1} + {2}", Input Binding String(Button(Interact)), Input Binding String(
						Button(Ability 2)), Input Binding String(Button(Melee))), Event Player.playerData[3])));
				End;
			End;
			If(Event Player.finished);
				Event Player.bodySize = 1;
				Start Forcing Player To Be Hero(Event Player, Hero(Mercy));
				Call Subroutine(CreatePlayerTargetBot);
				If(!Entity Exists(Event Player.enmy) && Event Player.checkpointA[9]);
            		Call Subroutine(CreatePlayerEnemyBot);
				End;
			End;
		End;
	}
}

rule("Subroutine ChooseCheckpoint")
{
	event
	{
		Subroutine;
		ChooseCheckpoint;
	}

	actions
	{
		If(Is Button Held(Event Player, Button(Primary Fire)));
			Event Player.checkpoint += Event Player.checkpoint == Count Of(Global.Checkpoint) - 1 ? 1 - Count Of(Global.Checkpoint) : 1;
		Else;
			Event Player.checkpoint -= Event Player.checkpoint == 0 ? 1 - Count Of(Global.Checkpoint) : 1;
		End;
	}
}

rule("Subroutine SkipOrBackCheckpoint")
{
	event
	{
		Subroutine;
		SkipOrBackCheckpoint;
	}

	actions
	{
		If(!Global.EditMode);
			If(Event Player.checkpoint == Event Player.playerData[0]);
				Event Player.cheat = False;
				Event Player.leaveOriginalCheckpoint = False;
				Event Player.time = Event Player.playerData[1];
				Event Player.mistake = Event Player.playerData[2];
				If(Event Player.checkpoint != 0 || Event Player.playerData[3] == 0);
					Small Message(Event Player, Custom String("{0}", Hero(Mercy)) == Custom String("메르시") ? Custom String(
						"{0} 레벨로 다시 돌아왔어요. 시간이 다시 흘러갑니다.", Event Player.playerData[3]) : (Custom String("{0}", Hero(Mercy)) == Custom String("天使")
						? Custom String("你已回到第{0}关, 离开点位继续计时", Event Player.playerData[3]) : Custom String(
						"You have returned to level {0}, Leave the checkpoint and continue timing!", Event Player.playerData[3])));
				End;
			Else;
				Event Player.cheat = True;
			End;
		End;
		Teleport(Event Player, Global.Checkpoint[Event Player.checkpoint][0]);
		Call Subroutine(GetCurrentCheckpoint);
		If(!Event Player.freeMode);
			Call Subroutine(SetCurrentAbilities);
		End;
		Call Subroutine(KillOrResurrectBot);
		Start Rule(CreateCurrentEffects, Restart Rule);
		Call Subroutine(CreateCurrentWorldText);
		If(!Global.EditMode && Event Player.checkpoint == Count Of(Global.Checkpoint) - 1);
			Destroy Dummy Bot(Team Of(Event Player), Slot Of(Event Player) + Number Of Slots(All Teams));
            Destroy Dummy Bot(Opposite Team Of(Team Of(Event Player)), Slot Of(Event Player.enmy));
        Else If(!Entity Exists(Event Player.enmy) && Event Player.checkpointA[9]);
            Call Subroutine(CreatePlayerEnemyBot);
		End;
	}
}

rule("Server load widget by GigaMercy (i've edited it so it only shows for myself, make sure you change the username if you copy)")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create HUD Text(Custom String("{0}", Local Player) == Custom String("maylanix") ? Host Player : Null, Null, Custom String(
			"Server Load: {0}%, Avg: {1}%, Peak: {2}%", Server Load, Server Load Average, Server Load Peak), Null, Right, 0, Null,
			Server Load Average > 120 ? Color(Red) : (Server Load Average > 80 ? Color(Orange) : Color(Green)), Null,
			Visible To String and Color, Default Visibility);
		Create HUD Text(Custom String("{0}", Local Player) == Custom String("maylanix") ? Host Player : Null, Null, Custom String(
			"Effect count {0}/256", Entity Count), Null, Right, 0, Null, Entity Count > 240 ? Color(Red) : (Entity Count > 200 ? Color(
			Orange) : Color(Green)), Null, Visible To String and Color, Default Visibility);
	}
}
